{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fun with migasfree Sobre este libro Licencia y Copyright Fun with migasfree Copyright (C) 2013 - 2020 Alberto Gac\u00edas and contributors. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\". Presentaci\u00f3n Hola. Soy Alberto Gac\u00edas. Bienvenidos al primer cap\u00edtulo de \"Alberto Gac\u00edas presenta diversi\u00f3n con migasfree\". Durante las pr\u00f3ximas p\u00e1ginas, usted y yo vamos a explorar el din\u00e1mico mundo de la migasfreelog\u00eda 1 . \u00bfQu\u00e9 es migasfree en cuatro palabras? Un gestor de despliegues . Me atrevo incluso con s\u00f3lo una palabra: Desplegador . Migasfree se ocupa principalmente del proceso de la liberaci\u00f3n de software y de la posterior auditor\u00eda de los cambios producidos en los equipos como consecuencia de esa liberaci\u00f3n. Es una de las herramientas que estamos utilizando con \u00e9xito en AZLinux , el proyecto de migraci\u00f3n a escritorio libre del Ayuntamiento de Zaragoza . Este software se ha hecho indispensable en nuestro d\u00eda a d\u00eda, y creo que es una buena soluci\u00f3n para personalizar y administrar escritorios de forma eficaz. \u00bfPara qu\u00e9 sirve migasfree? Para administrar ordenadores de forma centralizada. Desplegar actualizaciones seg\u00fan calendarios y caracter\u00edsticas de ordenadores y usuarios. Controlar y personalizar cada ordenador, manteniendo \u00edntegros tus sistemas. Auditar hardware y software. Este libro te introducir\u00e1 en el uso de migasfree y lo escribo a medida que mejoramos el software, con lo que, si te lo descargaste hace tiempo, quiz\u00e1s ya est\u00e9 obsoleto. Tenlo en cuenta. A qui\u00e9n va dirigido Este libro puede serte \u00fatil si eres administrador de escritorios (y/o servidores) y quieres personalizar y administrar de forma eficaz tus equipos, manteniendo la integridad de los sistemas. Estructura Parte 1. Introducci\u00f3n En esta primera parte, repasaremos la Gesti\u00f3n de la Configuraci\u00f3n del Software. Conocer los aspectos b\u00e1sicos de este proceso de la Ingenier\u00eda del Software te dar\u00e1 una visi\u00f3n de conjunto que considero esencial porque es, precisamente aqu\u00ed, donde se integra migasfree. Te explicar\u00e9 las dificultades que un administrador de escritorios va a encontrarse y c\u00f3mo se pueden sortear de forma sencilla, bas\u00e1ndome en la experiencia adquirida en AZLinux. Podr\u00e1s conocer la historia, caracter\u00edsticas y componentes que utiliza migasfree. Parte 2. Primeros Pasos Aqu\u00ed te ense\u00f1ar\u00e9 a instalar y probar un servidor y cliente migasfree, con la configuraci\u00f3n m\u00ednima, para que puedas verlos en funcionamiento cuanto antes. Parte 3. Gu\u00eda de uso Te permitir\u00e1 conocer tanto el cliente como el servidor migasfree m\u00e1s en detalle. Parte 4. Puesta en producci\u00f3n Se tratar\u00e1n los aspectos a tener en cuenta si quieres utilizar migasfree en un entorno de producci\u00f3n, as\u00ed como las FAQs y la resoluci\u00f3n de problemas. Ajustes Detalla los ajustes necesarios para configurar correctamente tanto el servidor migasfree como los clientes. Empaquetado Contiene intrucciones para empaquetar migasfree en cualquier distribuci\u00f3n. Anexos Contiene la API de migasfree, la bibliograf\u00eda, referencias y licencia de este libro. Agradecimientos Detr\u00e1s de cada proyecto hay personas que lo hacen posible, manteniendo, animando, corrigiendo, colaborando, apoyando... Deseo expresar en primer lugar mi gratitud a Eduardo Romero. Me dio el est\u00edmulo necesario para liberar la primera versi\u00f3n de migasfree, haciendo visible este proyecto en Internet. Tambi\u00e9n aport\u00f3 la primera y \u00fanica donaci\u00f3n que ha recibido migasfree (aunque fuera por una apuesta perdida, no se lo tuve en cuenta y fue muy bien recibida). A Jose Antonio Chavarr\u00eda, compa\u00f1ero de fatigas (y alegr\u00edas), tambi\u00e9n me siento agradecido. Ha sido y es piedra angular en migasfree. Ha mejorado sustancialmente el proyecto reescribiendo el c\u00f3digo spaguetti a buen c\u00f3digo 2 , aportando ideas y soluciones. Me tranquiliza cuando quiero correr en exceso, y es el guardi\u00e1n de la simplicidad de migasfree. A Jes\u00fas Gonz\u00e1lez por su empe\u00f1o en crear equipos de trabajo donde las personas nos sentimos a gusto trabajando. Y a todo el grupo de Asistencia a Usuarios del Ayuntamiento de Zaragoza, especialmente al equipo de Software Libre. Disfruto trabajando con ellos y me hacen re\u00edr a diario. Grupo de Software Libre del Ayuntamiento de Zaragoza (a\u00f1o 2013) Acerca de m\u00ed De joven me atra\u00eda la programaci\u00f3n. Estudi\u00e9 electr\u00f3nica, y all\u00ed me ense\u00f1aron a programar en c\u00f3digo m\u00e1quina el microcontrolador 8751. A\u00fan me gusta cacharrear con transistores, condensadores, circuitos integrados, leds... y ense\u00f1ar lo poco que recuerdo de todo aquello a Jes\u00fas. A los dos nos gusta jugar con arduino scratch y s4a . Trabaj\u00e9 como electr\u00f3nico mis primeros a\u00f1os laborales y, poco despu\u00e9s, con el boom de la inform\u00e1tica personal, empec\u00e9 a desarrollar aplicaciones de todo tipo. Actualmente trabajo como t\u00e9cnico inform\u00e1tico en el equipo de Software Libre del Ayuntamiento de Zaragoza desarrollando y manteniendo AZLinux, el escritorio libre que usamos los trabajadores municipales. Parte de mi tiempo libre lo dedico a desarrollar migasfree. Me encanta mirar el cielo en las noches de verano de Pe\u00f1iscola, la cerveza, las migas y los huevos rotos. Tambi\u00e9n me gusta escuchar m\u00fasica, el olor a tierra mojada y que me hagan re\u00edr con cualquier tontada. Amo a Patricia, y a Jes\u00fas, nuestro hijo. Nota del autor Algunos han criticado a las personas que entregamos parte de nuestro tiempo en producir software libre. El argumento se basa en que nuestra aportaci\u00f3n hace que se eliminen puestos de trabajo o que algunas empresas no pueden hacer negocio por competencia desleal. Dicen estar hartos de gente que \"trabajamos gratis\" y que les \"quitamos\" el sustento. No puedo estar de acuerdo. En primer lugar porque el software libre no es un asunto econ\u00f3mico sino que, sencillamente, lo que plantea es una cuesti\u00f3n de libertad . Pienso que los modelos de negocio obsoletos deben adaptarse y evolucionar hacia nuevas formas de generar riqueza, creando nuevas relaciones entre productor y consumidor. Los modelos de negocios basados en software libre a menudo nos indican el camino a seguir, ya que est\u00e1n estableciendo estas nuevas relaciones y obteniendo la confianza y el reconocimiento del consumidor, y no precisamente por cuestiones econ\u00f3micas. \u00bfNo desean esto las empresas para s\u00ed? En cuanto a que producir algo que otros obtienen gratis no genera puestos de trabajo, pienso que es falso. S\u00f3lo hace falta fijarse en como las tecnolog\u00edas de interconexi\u00f3n, protocolos y servicios de accesibilidad de la red Internet ha generado, y seguir\u00e1 generando, infinidad de puestos de trabajo. Estoy convencido que Internet no ser\u00eda ni siquiera una sombra de lo que es si estas tecnolog\u00edas se hubieran patentado, cerrado y/o explotado econ\u00f3micamente. Creo que el movimiento del software libre es, junto con otros, una esperanza para que el Conocimiento vuelva a ser producido por la sociedad y para la sociedad, en contraposici\u00f3n al Conocimiento creado, comercializado y controlado por determinadas organizaciones y que, en ocasiones, causa un perjuicio a la sociedad. Enlaces Versi\u00f3n en HTML . Versi\u00f3n en PDF . Ejemplos usados en el libro . C\u00f3digo fuente . Proyecto migasfree . Twitter: @migasfree , @albertogacias . Recordando a Sheldon Cooper en \"Fun with Flags\" en la serie The Big Bang Theory. \u21a9 Proceso conocido muy localmente como chavarrizaci\u00f3n . \u21a9","title":"Sobre este libro"},{"location":"#sobre-este-libro","text":"","title":"Sobre este libro"},{"location":"#licencia-y-copyright","text":"Fun with migasfree Copyright (C) 2013 - 2020 Alberto Gac\u00edas and contributors. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\".","title":"Licencia y Copyright"},{"location":"#presentacion","text":"Hola. Soy Alberto Gac\u00edas. Bienvenidos al primer cap\u00edtulo de \"Alberto Gac\u00edas presenta diversi\u00f3n con migasfree\". Durante las pr\u00f3ximas p\u00e1ginas, usted y yo vamos a explorar el din\u00e1mico mundo de la migasfreelog\u00eda 1 .","title":"Presentaci\u00f3n"},{"location":"#que-es-migasfree-en-cuatro-palabras","text":"Un gestor de despliegues . Me atrevo incluso con s\u00f3lo una palabra: Desplegador . Migasfree se ocupa principalmente del proceso de la liberaci\u00f3n de software y de la posterior auditor\u00eda de los cambios producidos en los equipos como consecuencia de esa liberaci\u00f3n. Es una de las herramientas que estamos utilizando con \u00e9xito en AZLinux , el proyecto de migraci\u00f3n a escritorio libre del Ayuntamiento de Zaragoza . Este software se ha hecho indispensable en nuestro d\u00eda a d\u00eda, y creo que es una buena soluci\u00f3n para personalizar y administrar escritorios de forma eficaz.","title":"\u00bfQu\u00e9 es migasfree en cuatro palabras?"},{"location":"#para-que-sirve-migasfree","text":"Para administrar ordenadores de forma centralizada. Desplegar actualizaciones seg\u00fan calendarios y caracter\u00edsticas de ordenadores y usuarios. Controlar y personalizar cada ordenador, manteniendo \u00edntegros tus sistemas. Auditar hardware y software. Este libro te introducir\u00e1 en el uso de migasfree y lo escribo a medida que mejoramos el software, con lo que, si te lo descargaste hace tiempo, quiz\u00e1s ya est\u00e9 obsoleto. Tenlo en cuenta.","title":"\u00bfPara qu\u00e9 sirve migasfree?"},{"location":"#a-quien-va-dirigido","text":"Este libro puede serte \u00fatil si eres administrador de escritorios (y/o servidores) y quieres personalizar y administrar de forma eficaz tus equipos, manteniendo la integridad de los sistemas.","title":"A qui\u00e9n va dirigido"},{"location":"#estructura","text":"","title":"Estructura"},{"location":"#parte-1-introduccion","text":"En esta primera parte, repasaremos la Gesti\u00f3n de la Configuraci\u00f3n del Software. Conocer los aspectos b\u00e1sicos de este proceso de la Ingenier\u00eda del Software te dar\u00e1 una visi\u00f3n de conjunto que considero esencial porque es, precisamente aqu\u00ed, donde se integra migasfree. Te explicar\u00e9 las dificultades que un administrador de escritorios va a encontrarse y c\u00f3mo se pueden sortear de forma sencilla, bas\u00e1ndome en la experiencia adquirida en AZLinux. Podr\u00e1s conocer la historia, caracter\u00edsticas y componentes que utiliza migasfree.","title":"Parte 1. Introducci\u00f3n"},{"location":"#parte-2-primeros-pasos","text":"Aqu\u00ed te ense\u00f1ar\u00e9 a instalar y probar un servidor y cliente migasfree, con la configuraci\u00f3n m\u00ednima, para que puedas verlos en funcionamiento cuanto antes.","title":"Parte 2. Primeros Pasos"},{"location":"#parte-3-guia-de-uso","text":"Te permitir\u00e1 conocer tanto el cliente como el servidor migasfree m\u00e1s en detalle.","title":"Parte 3. Gu\u00eda de uso"},{"location":"#parte-4-puesta-en-produccion","text":"Se tratar\u00e1n los aspectos a tener en cuenta si quieres utilizar migasfree en un entorno de producci\u00f3n, as\u00ed como las FAQs y la resoluci\u00f3n de problemas.","title":"Parte 4. Puesta en producci\u00f3n"},{"location":"#ajustes","text":"Detalla los ajustes necesarios para configurar correctamente tanto el servidor migasfree como los clientes.","title":"Ajustes"},{"location":"#empaquetado","text":"Contiene intrucciones para empaquetar migasfree en cualquier distribuci\u00f3n.","title":"Empaquetado"},{"location":"#anexos","text":"Contiene la API de migasfree, la bibliograf\u00eda, referencias y licencia de este libro.","title":"Anexos"},{"location":"#agradecimientos","text":"Detr\u00e1s de cada proyecto hay personas que lo hacen posible, manteniendo, animando, corrigiendo, colaborando, apoyando... Deseo expresar en primer lugar mi gratitud a Eduardo Romero. Me dio el est\u00edmulo necesario para liberar la primera versi\u00f3n de migasfree, haciendo visible este proyecto en Internet. Tambi\u00e9n aport\u00f3 la primera y \u00fanica donaci\u00f3n que ha recibido migasfree (aunque fuera por una apuesta perdida, no se lo tuve en cuenta y fue muy bien recibida). A Jose Antonio Chavarr\u00eda, compa\u00f1ero de fatigas (y alegr\u00edas), tambi\u00e9n me siento agradecido. Ha sido y es piedra angular en migasfree. Ha mejorado sustancialmente el proyecto reescribiendo el c\u00f3digo spaguetti a buen c\u00f3digo 2 , aportando ideas y soluciones. Me tranquiliza cuando quiero correr en exceso, y es el guardi\u00e1n de la simplicidad de migasfree. A Jes\u00fas Gonz\u00e1lez por su empe\u00f1o en crear equipos de trabajo donde las personas nos sentimos a gusto trabajando. Y a todo el grupo de Asistencia a Usuarios del Ayuntamiento de Zaragoza, especialmente al equipo de Software Libre. Disfruto trabajando con ellos y me hacen re\u00edr a diario. Grupo de Software Libre del Ayuntamiento de Zaragoza (a\u00f1o 2013)","title":"Agradecimientos"},{"location":"#acerca-de-mi","text":"De joven me atra\u00eda la programaci\u00f3n. Estudi\u00e9 electr\u00f3nica, y all\u00ed me ense\u00f1aron a programar en c\u00f3digo m\u00e1quina el microcontrolador 8751. A\u00fan me gusta cacharrear con transistores, condensadores, circuitos integrados, leds... y ense\u00f1ar lo poco que recuerdo de todo aquello a Jes\u00fas. A los dos nos gusta jugar con arduino scratch y s4a . Trabaj\u00e9 como electr\u00f3nico mis primeros a\u00f1os laborales y, poco despu\u00e9s, con el boom de la inform\u00e1tica personal, empec\u00e9 a desarrollar aplicaciones de todo tipo. Actualmente trabajo como t\u00e9cnico inform\u00e1tico en el equipo de Software Libre del Ayuntamiento de Zaragoza desarrollando y manteniendo AZLinux, el escritorio libre que usamos los trabajadores municipales. Parte de mi tiempo libre lo dedico a desarrollar migasfree. Me encanta mirar el cielo en las noches de verano de Pe\u00f1iscola, la cerveza, las migas y los huevos rotos. Tambi\u00e9n me gusta escuchar m\u00fasica, el olor a tierra mojada y que me hagan re\u00edr con cualquier tontada. Amo a Patricia, y a Jes\u00fas, nuestro hijo.","title":"Acerca de m\u00ed"},{"location":"#nota-del-autor","text":"Algunos han criticado a las personas que entregamos parte de nuestro tiempo en producir software libre. El argumento se basa en que nuestra aportaci\u00f3n hace que se eliminen puestos de trabajo o que algunas empresas no pueden hacer negocio por competencia desleal. Dicen estar hartos de gente que \"trabajamos gratis\" y que les \"quitamos\" el sustento. No puedo estar de acuerdo. En primer lugar porque el software libre no es un asunto econ\u00f3mico sino que, sencillamente, lo que plantea es una cuesti\u00f3n de libertad . Pienso que los modelos de negocio obsoletos deben adaptarse y evolucionar hacia nuevas formas de generar riqueza, creando nuevas relaciones entre productor y consumidor. Los modelos de negocios basados en software libre a menudo nos indican el camino a seguir, ya que est\u00e1n estableciendo estas nuevas relaciones y obteniendo la confianza y el reconocimiento del consumidor, y no precisamente por cuestiones econ\u00f3micas. \u00bfNo desean esto las empresas para s\u00ed? En cuanto a que producir algo que otros obtienen gratis no genera puestos de trabajo, pienso que es falso. S\u00f3lo hace falta fijarse en como las tecnolog\u00edas de interconexi\u00f3n, protocolos y servicios de accesibilidad de la red Internet ha generado, y seguir\u00e1 generando, infinidad de puestos de trabajo. Estoy convencido que Internet no ser\u00eda ni siquiera una sombra de lo que es si estas tecnolog\u00edas se hubieran patentado, cerrado y/o explotado econ\u00f3micamente. Creo que el movimiento del software libre es, junto con otros, una esperanza para que el Conocimiento vuelva a ser producido por la sociedad y para la sociedad, en contraposici\u00f3n al Conocimiento creado, comercializado y controlado por determinadas organizaciones y que, en ocasiones, causa un perjuicio a la sociedad.","title":"Nota del autor"},{"location":"#enlaces","text":"Versi\u00f3n en HTML . Versi\u00f3n en PDF . Ejemplos usados en el libro . C\u00f3digo fuente . Proyecto migasfree . Twitter: @migasfree , @albertogacias . Recordando a Sheldon Cooper en \"Fun with Flags\" en la serie The Big Bang Theory. \u21a9 Proceso conocido muy localmente como chavarrizaci\u00f3n . \u21a9","title":"Enlaces"},{"location":"part1/","text":"PARTE 1 INTRODUCCI\u00d3N Gesti\u00f3n de la Configuraci\u00f3n Software Nada es permanente a excepci\u00f3n del cambio. -- Her\u00e1clito de \u00c9feso. Estamos acostumbrados a actualizar peri\u00f3dicamente nuestras aplicaciones: los sistemas se hacen obsoletos r\u00e1pidamente, aparecen nuevas tecnolog\u00edas, hay errores que son resueltos, surgen nuevas necesidades. Sin importar en qu\u00e9 momento del ciclo de vida del sistema nos encontremos, el sistema cambiar\u00e1, y el deseo de cambiarlo persistir\u00e1 a lo largo de todo el ciclo de vida. 1 Por tanto, el cambio en el software es inevitable y es deseable que ocurra. Es inevitable porque los desarrolladores cometemos errores y es mediante una modificaci\u00f3n como los corregimos. A este tipo de cambios los llamamos correctivos . Por otro lado, el cambio es deseable ya que a menudo queremos incorporar nuevas funcionalidades al software o mejorar aquellas que ya exist\u00edan. Mediante los cambios evolutivos es como mejoramos el software. El cambio genera confusi\u00f3n e incertidumbre y se produce desde que concebimos, constru\u00edmos y tambi\u00e9n mientras mantenemos un proyecto software. El gran reto reside precisamente en gestionar de forma controlada dichos cambios usando alguna estrategia que los favorezca y facilite. De esto trata precisamente la Gesti\u00f3n de la Configuraci\u00f3n Software (GCS), un proceso de la Ingenier\u00eda del Software que identifica, hace seguimiento y controla cada uno de los cambios que se producen en los sistemas. Objetivo El objetivo de la GCS es conservar la integridad de los sistemas frente a los cambios. Un sistema ser\u00e1 \u00edntegro frente al cambio si: Mantiene correctamente las relaciones entre los distintos cambios a medida que se van produciendo (el t\u00edpico problema de dependencias entre elementos). Permite la auditor\u00eda de cambios (conocimiento del estado de un sistema al que se le han ido aplicando cambios sucesivamente). El proceso El proceso de la GCS es un conjunto de actividades que nos permitir\u00e1 garantizar dicha integridad, y que podemos resumir en: Petici\u00f3n de cambio. Cambio. Liberaci\u00f3n. Petici\u00f3n de cambio Cuando se nos reporta un error o una petici\u00f3n de mejora, lo primero que hacemos es identificar el Elemento de Configuraci\u00f3n Software (ECS) al que se refiere. Un ECS es cualquier objeto software sometido a la GCS. Puede ser un manual de usuario, una especificaci\u00f3n, un conjunto de datos para realizar tests, una aplicaci\u00f3n, una librer\u00eda, incluso las herramientas que se usan para realizar dichos cambios, etc. Una vez identificado el ECS se registra la petici\u00f3n de cambio. Las herramientas t\u00edpicas para registrar y hacer el seguimiento del cambio son los denominados gestores de proyectos (Redmine, Bugzilla, Tracker, etc.) Cada petici\u00f3n de cambio es analizada m\u00e1s tarde pudiendo ser aceptada o rechazada. Si es rechazada, se avisa al informador y se cierra la petici\u00f3n. Si es aceptada, se asigna la petici\u00f3n a alguien para que realice dicho cambio. Cambio El cambio es la actividad que modifica el ECS, generando una nueva versi\u00f3n del ECS. En esta actividad se utilizan un conjunto muy diverso de herramientas, desde procesadores y editores de texto, sistemas de control de versiones, entornos de desarrollo integrados (IDE), depuradores, compiladores... Liberaci\u00f3n La liberaci\u00f3n es la actividad de situar la nueva versi\u00f3n del ECS generada, en un repositorio o almac\u00e9n para que posteriormente los clientes del ECS puedan acceder a \u00e9l e instalarlo. Elemento de Configuraci\u00f3n Software Si observamos como los diferentes proyectos de Software Libre realizan la GCS, vemos que realizan las actividades mencionadas liberando finalmente el c\u00f3digo fuente del proyecto en Internet. Estos proyectos trabajan con distintos tipos de ECS (.png, .txt, .py, .c, .bin, etc.) usando los Sistemas de Control de Versiones , junto con las plataformas de desarrollo colaborativo como sourceforge.net, github.com, etc. Este c\u00f3digo fuente ser\u00e1 posteriormente compilado por los mantenedores de las distribuciones GNU/Linux (Fedora, Red Hat, Debian, Ubuntu, etc.), realizando su propia GCS. Pero a diferencia de los primeros, las Distribuciones GNU/Linux s\u00f3lo trabajan sobre un \u00fanico tipo de ECS: el paquete , donde introducir\u00e1n el programa ya compilado. Este simple hecho permite garantizar la integridad frente a los cambios de forma eficaz y sencilla, como veremos a continuaci\u00f3n. El paquete Un paquete es un contenedor que encapsula un conjunto de ECS liberados por un determinado proyecto, junto a su metainformaci\u00f3n. Contendr\u00e1, por tanto, el programa compilado para una determinada distribuci\u00f3n y arquitectura, m\u00e1s un amplio conjunto de informaci\u00f3n, como puede ser: El autor del programa. La direcci\u00f3n del repositorio del proyecto. La versi\u00f3n del ECS. La arquitectura. El nombre y direcci\u00f3n e-mail del empaquetador. La fecha de empaquetado. El nombre del equipo en que se produjo el empaquetado. Una descripci\u00f3n corta del contenido del paquete. Una descripci\u00f3n larga. Pero, adem\u00e1s, suelen incluir: Dependencias con otros paquetes. C\u00f3digo a ejecutar antes y despu\u00e9s de: Instalar. Actualizar. Eliminar el paquete. Una vez que un mantenedor de una Distribuci\u00f3n GNU/Linux ha creado un paquete, lo libera poni\u00e9ndolo en un repositorio p\u00fablico a disposici\u00f3n de los clientes. Puesta en producci\u00f3n Los encargados de aplicar los cambios son los programas denominados gestores de paquetes tales como yum , zypper o apt . Un gestor de paquetes es un programa que permite poner en producci\u00f3n los cambios que han sido liberados en los repositorios. La actualizaci\u00f3n de un equipo se realiza comparando las versiones de los paquetes instalados con los paquetes de los repositorios p\u00fablicos, detectando los que han aumentado su versi\u00f3n, resolviendo sus dependencias y finalmente, si no hay conflictos, obtienen desde los repositorios los paquetes necesarios. Una vez han descargado los paquetes, dan \u00f3rdenes a los backends ( rpm , dpkg , etc.), para que se produzca la desinstalaci\u00f3n de los paquetes antiguos y la instalaci\u00f3n de los nuevos. Los backends abren el paquete, y grosso modo: 1. Extraen los ficheros del programa copi\u00e1ndolos en el sistema, y ejecutan adem\u00e1s el c\u00f3digo programado para antes y despu\u00e9s de la actualizaci\u00f3n. 2. La metainformaci\u00f3n es extra\u00edda del paquete y se almacena en la base de datos del backend. Dec\u00eda Ian Murdock, fundador de Debian, que el gran aporte del software libre a la industria, ha sido precisamente la invenci\u00f3n del sistema de paqueter\u00eda (paquete, repositorio, gestor de paquetes). Y no es para menos, ya que este sistema nos proporciona los dos requisitos necesarios que garantizan la integridad frente a los cambios: El control de dependencias, mediante el gestor de paquetes. La auditor\u00eda, mediante las consultas a la base de datos del backend. nota Si est\u00e1s acostumbrado a instalar programas mediante el t\u00edpico \u201c./configure, make, install\u201d, tienes que ser consciente que est\u00e1s rompiendo la integridad frente a los cambios, ya que la base de datos del backend no es actualizada con este procedimiento. Todo lo que no sea instalar programas mediante el gestor de paquetes o el backend, rompe la integridad. A continuaci\u00f3n, se muestra una tabla con las operaciones m\u00e1s comunes que puedes emplear sobre algunos de los gestores de paquetes m\u00e1s conocidos: Operaciones Gestores apt yum zypper Actualizar listado de paquetes disponibles apt-get update yum check-update zypper refresh Actualizar sistema apt-get upgrade yum update zypper update Instalar paquete apt-get install <pkg> yum install <pkg> zypper install<pkg> Borrar paquete apt-get remove <pkg> yum erase <pkg> zypper remove <pkg> Buscar paquete apt-cache yum list zypper search Buscar repositorio de un paquete apt-cache madison <pkg> yum whatprovides <pkg> zypper whatprovides <pkg> Veamos ahora las operaciones m\u00e1s comunes que puedes emplear sobre los backends dpkg y rpm : Operaciones Backends dpkg rpm Instalar fichero de paquete dpkg -i <file.deb> rpm -ivh <file.rpm> Borrar paquete dpkg -r <pkg> rpm -e <pkg> Paquete que instala el fichero <file> dpkg -S <file> rpm -qf <file> Ficheros del paquete dpkg -L <pkg> rpm -ql <pkg> Descripci\u00f3n del paquete dpkg -s <pkg> rpm -qi <pkg> Paquetes instalados dpkg -l rpm -qa Administrando escritorios En todo lo que nos rodea y en todo lo que nos mueve, debemos advertir que interviene en algo la casualidad. -- Anatole France. En el cap\u00edtulo anterior, hemos hablado de la GCS y de c\u00f3mo las distribuciones GNU/Linux utilizan el sistema de paqueter\u00eda para garantizar la integridad frente al cambio. Si tienes un equipo dom\u00e9stico, todos los cambios producidos y liberados por los distintos proyectos y que hayan sido empaquetados y liberados por tu distribuci\u00f3n GNU/Linux, ser\u00e1n instalados convenientemente con el simple hecho de dar la orden al gestor de paquetes para que actualice tu sistema. Ahora bien, en una organizaci\u00f3n donde se requiera administrar los escritorios esto no es suficiente, veamos el porqu\u00e9. La personalizaci\u00f3n La primera dificultad importante a la que se va a enfrentar un administrador, va a ser la de la personalizaci\u00f3n. Imagina que tienes que migrar y administrar 1000 equipos a GNU/Linux y que tienes en tu red un servicio NTP, requiri\u00e9ndose que todos tus escritorios est\u00e9n con la hora sincronizada con este servicio. Vas a tener que personalizar el cliente NTP en todos tus escritorios. Una manera que se suele utilizar es instalar en un equipo una distribuci\u00f3n GNU/Linux desde un DVD, editar el fichero de configuraci\u00f3n del cliente NTP y configurar la IP (o el nombre DNS) del servidor donde se encuentra el servcio NTP. Despu\u00e9s, puedes crear una imagen del disco duro con un sistema de clonado como pueda ser Clonezilla y clonar uno a uno los equipos usando dicha imagen. Con este m\u00e9todo, la personalizaci\u00f3n inicial reside en dicha imagen, pero sigamos imaginando... Un d\u00eda, a mitad de migraci\u00f3n, recibes un correo y lees: \"Alberto: El servicio NTP dejar\u00e1 de dar servicio a partir del d\u00eda 10. En su lugar vamos a disponer de un nuevo servicio, llamado QueHoraEs, que es mucho mejor porque...\" En este momento, ya estar\u00e1s pensando en los 400 equipos que tienes migrados y te echar\u00e1s las manos a la cabeza porque es evidente que este sistema de personalizaci\u00f3n no es adecuado. nota La personalizaci\u00f3n inicial es muy sencilla de realizar, pero un cambio en la personalizaci\u00f3n puede darse en cualquier momento, y tienes que estar preparado para poder realizarlo. Gestores de Sistemas Afortunadamente, existen unas herramientas denominadas Gestores de Sistemas ( Systems Management Systems ), que pueden ayudarnos en la administraci\u00f3n de los escritorios. Algunos de estos Gestores de Sistemas se centran en la adquisici\u00f3n del estado de los equipos como Nagios , y otros permiten automatizar tareas mediante la ejecuci\u00f3n de c\u00f3digo en los equipos de manera centralizada como Zenworks , Landscape , chef , puppet , cfengine , ansible . Los Gestores de Sistemas est\u00e1n muy influidos por las iniciativas realizadas en los sistemas de gesti\u00f3n de redes de telecomunicaciones, pudiendo realizar una o un conjunto de las siguientes tareas: Inventario hardware. Monitoreado de disponibilidad de servidores y mediciones. Inventario e instalaci\u00f3n de software. Gesti\u00f3n de antivirus y anti-malware. Monitoreado de las actividades de los usuarios. Monitoreado de la capacidad de los sistemas. Gesti\u00f3n de seguridad. Gesti\u00f3n de almacenamiento. Monitoreado de la utilizaci\u00f3n y capacidades de la red. Estas tareas podemos clasificarlas de acuerdo a FCAPS , un modelo y marco de trabajo de red de la gesti\u00f3n de telecomunicaciones de ISO para la gesti\u00f3n de redes. FCAPS es un acr\u00f3nimo de Fault, Configuration, Accounting, Performance, Security (Falla, Configuraci\u00f3n, Contabilidad, Desempe\u00f1o, Seguridad), que son las categor\u00edas en las cuales el modelo ISO define las tareas de gesti\u00f3n de redes. Fault (Fallas): Es un evento que tiene un significado negativo. Su objetivo es reconocer, aislar , corregir y registrar fallos. Puede utilizar an\u00e1lisis de tendencias para predecir errores. Cuando se detecta un fallo o evento, se env\u00eda una notificaci\u00f3n. Configuration (Configuraci\u00f3n): En el proceso de gesti\u00f3n de la configuraci\u00f3n, las operaciones diarias son monitoreadas y controladas. Los objetivos de la gesti\u00f3n de la configuraci\u00f3n son: Recolectar informaci\u00f3n. Modificar la configuraci\u00f3n. Generaci\u00f3n de reportes Gesti\u00f3n de cambios. Los cambios de Hardware y Software son controlados por este proceso: Actualizaci\u00f3n, Instalaci\u00f3n y eliminaci\u00f3n de programas. Actualizaci\u00f3n, Instalaci\u00f3n y eliminaci\u00f3n de equipamiento (impresoras, scaners, memoria, etc.) Este proceso debe tener en cuenta: Permitir acceso r\u00e1pido a la informaci\u00f3n de la configuraci\u00f3n. Facilitar la configuraci\u00f3n remota de los dispositivos. Proporcionar un inventario actualizado de Software y Hardware. Simplificaci\u00f3n de la configuraci\u00f3n de dispositivos. El seguimiento de cambios a la configuraci\u00f3n. Accounting (Contabilidad): Su objetivo es reunir las estad\u00edsticas de los usuarios. Performance (Desempe\u00f1o). Recolentando y analizando los datos de rendimiento, el estado general de los sistemas pueden ser monitorizado. Las tendencias pueden avisar de fallos de capacidad o de cuestiones relacionadas con la fiabilidad de los sistemas, antes de que en estos ocurran. Umbrales de rendimiento pueden ser establecidos para lanzar alarmas que ser\u00edan controladas por la gesti\u00f3n de fallos habitual. Las alarmas se pueden clasificar atendiendo al grado de severidad. Security (Seguridad). Se encarga de controlar el acceso a recursos de red. La seguridad de los datos puede ser conseguida con la autenticaci\u00f3n, cifrado y permisos, principalmente. nota Migasfreee atendiendo a FCAPS, tiene capacidades de Faults, Configuration y Accounting. Un ejemplo de funcionamiento t\u00edpico de un Gestor de Sistemas que incorpore tareas de Configuration usar\u00eda un lenguaje que especificar\u00eda a qu\u00e9 estado se quiere llevar a los equipos, no c\u00f3mo llegar a ese estado. En nuestro caso, ser\u00eda algo parecido a esto: aseg\u00farate de que el paquete ntp-client est\u00e1 desinstalado, aseg\u00farate de que el paquete quehoraes-client est\u00e1 instalado, aseg\u00farate de que el fichero de configuraci\u00f3n de quehoraes-client es el mismo que el que est\u00e1 en el servidor. Peri\u00f3dicamente, los clientes se conectar\u00edan al servidor para obtener este c\u00f3digo que ser\u00e1 ejecutado mediante el int\u00e9rprete propio del Gestor de Sistemas instalado en el cliente. Este sistema permite automatizar aquellas tareas que realizan a menudo los administradores de sistemas, y aunque algunos Gestores de Sistemas se las ingenian para llevar un control de versiones, mantienen una base de datos independiente a la de los backends de los gestores de paquetes, dejando en entredicho todo lo relativo a la integridad de los sistemas. Empaquetando la personalizaci\u00f3n En AZLinux usamos otro m\u00e9todo: empaquetamos siempre la personalizaci\u00f3n. Para el caso del cliente \u201cQueHoraEs\u201d, crear\u00edamos el paquete azl-quehoraes-client 2 con la siguiente informaci\u00f3n: Dependencias: quehoraes-client Obsoletos: ntp-client En el script de postinstalaci\u00f3n escribir\u00edamos el siguiente c\u00f3digo: En el fichero de configuraci\u00f3n del cliente QueHoraes, modificar el valor de la entrada \u201cserver=\u201d por la IP del servidor QueHoraEs \u00a1Listo! Con esto queda garantizada la integridad frente al cambio de la personalizaci\u00f3n, aprovech\u00e1ndonos de la integridad que nos proporciona el sistema de paqueter\u00eda de nuestra distribuci\u00f3n GNU/Linux. Una vez empaquetada nuestra personalizaci\u00f3n, se hace relativamente sencillo realizar cualquier cambio posterior en ella. Pero crear un paquete desde cero para personalizar una distribuci\u00f3n GNU/Linux no es tan f\u00e1cil, no tanto por la creaci\u00f3n del paquete en s\u00ed, sino porque la personalizaci\u00f3n requiere de los conocimientos suficientes sobre el sistema GNU/Linux y sobre la propia aplicaci\u00f3n que se personaliza. nota Empaquetar la personalizaci\u00f3n nos asegura la integridad de los sistemas frente a sus cambios. Date cuenta que no es necesario ning\u00fan Gestor de Sistemas para instalar dicha personalizaci\u00f3n. S\u00f3lo necesitas el Gestor de Paquetes, y \u00e9ste siempre lo tienes disponible en cualquier distribuci\u00f3n GNU/Linux. Niveles de personalizaci\u00f3n Las aplicaciones suelen incorporar dos niveles de personalizaci\u00f3n: La del usuario. La del sistema (para todos los usuarios del sistema). La personalizaci\u00f3n del usuario es prioritaria a la del sistema, siempre y cuando esta \u00faltima no sea obligatoria. Es conveniente conocer si la aplicaci\u00f3n que vas a configurar incorpora la personalizaci\u00f3n a nivel de sistema, ya que \u00e9sta es la que se tendr\u00e1 que configurar. En los casos en que las aplicaciones s\u00f3lo tengan la configuraci\u00f3n a nivel de usuario, o en los casos en los que se requiera, tendr\u00e1s que recorrer todos los usuarios para aplicar la personalizaci\u00f3n a cada uno de ellos. La liberaci\u00f3n Es el segundo problema importante con el que vas a tener que lidiar. Por un lado, debes independizarte de los repositorios p\u00fablicos de tu distribuci\u00f3n GNU/Linux, por el simple motivo de que no puedes permitir que el control de los cambios que se instalar\u00e1n en tus m\u00e1quinas, lo tenga tu distribuci\u00f3n GNU/Linux en vez de tu organizaci\u00f3n. \u00bfImaginas que habr\u00eda pasado en AZLinux cuando OpenSuSE sustituy\u00f3 OpenOffice por LibreOffice? Cuando los usuarios hubieran encendido las m\u00e1quinas a las 8:00 de la ma\u00f1ana, se iniciar\u00eda la actualizaci\u00f3n a LibreOffice autom\u00e1ticamente pudi\u00e9ndose producir muchas incidencias. \u00bfFuncionar\u00eda todo? \u00bfNo es mejor probar LibreOffice en tu organizaci\u00f3n antes de que se instale en todos tus equipos? Tener la posibilidad de deshacer un cambio que se haya determinado como no deseado es importante. Tienes que decidir por ti mismo el software que deben tener tus usuarios y, por tanto, debes tener los gestores de paquetes configurados contra tus propios repositorios de paquetes y gestionarlos de alguna manera. Adem\u00e1s, es conveniente que puedas planificar a qui\u00e9n y cu\u00e1ndo se deben liberar dichos cambios. Imagina nuevamente el ejemplo de la sustituci\u00f3n de OpenOffice por LibreOffice. Estar\u00edamos hablando de una actualizaci\u00f3n de cerca de 500 MB por equipo que, multiplicado por todos los equipos de una organizaci\u00f3n, podr\u00eda resultar en mucho tr\u00e1fico de red. Una ventaja de planificar la liberaci\u00f3n es que permite distribuir poco a poco los cambios, de tal manera que, si hay errores, afectar\u00e1 inicialmente a muy pocos equipos, permitiendo actuar de manera m\u00e1s relajada para corregir cualquier incidencia. Por todo esto, y como los repositorios est\u00e1ndar de las distribuciones no tienen ning\u00fan mecanismo de planificaci\u00f3n de la liberaci\u00f3n, es por lo que decidimos desarrollar migasfree, extendiendo el concepto de repositorio de paquetes al concepto de despliegue: repositorio de paquetes din\u00e1mico y planificable. Despliegue Migasfree Un despliegue de migasfree es, simplemente, un repositorio est\u00e1ndar m\u00e1s la capacidad de poder especificar, de forma centralizada, cu\u00e1ndo y qui\u00e9n accede a ese repositorio. Veamos como act\u00faa migasfree en lo relativo a los repositorios: Los cambios que se quieren liberar son empaquetados y subidos a un servidor migasfree. Se crea un despliegue con los paquetes subidos y se establece a qui\u00e9n (atributos de usuario + equipo) y en qu\u00e9 momento se deben aplicar dichos cambios. El servidor migasfree crea un repositorio f\u00edsico (id\u00e9ntico al de cualquier distribuci\u00f3n GNU/Linux) con dichos paquetes, utilizando las herramientas est\u00e1ndar de creaci\u00f3n de repositorios ( createrepo para paqueter\u00eda RPM o dpkg-scanpackages para paqueter\u00eda Debian). Cuando un cliente migasfree se conecta al servidor env\u00eda sus atributos al servidor. El servidor consulta los despliegues para determinar, en funci\u00f3n de esos atributos enviados, la lista de los repositorios f\u00edsicos que tiene el cliente a su disposici\u00f3n y se los env\u00eda al cliente. El cliente migasfree configura la lista de los repositorios f\u00edsicos recibidos desde el servidor en el Gestor de Paquetes. A continuaci\u00f3n, el cliente migasfree da instrucciones al Gestor de Paquetes para que se produzca la eliminaci\u00f3n, instalaci\u00f3n y actualizaci\u00f3n de los paquetes desde los repositorios f\u00edsicos. La GCS en tu organizaci\u00f3n En el cap\u00edtulo anterior, hemos visto el proceso de la GCS en los distintos proyectos de software libre y tambi\u00e9n en las distribuciones GNU/Linux. Pues bien, en una organizaci\u00f3n tambi\u00e9n debe realizarse el proceso de la GCS. Proceso GCS en tu organizaci\u00f3n con migasfree Un usuario hace una petici\u00f3n de cambio. Un desarrollador programa el cambio de la configuraci\u00f3n software dentro de un paquete y lo sube a un servidor migasfree. La liberaci\u00f3n es realizada por el servidor migasfree a los ordenadores requeridos. En AZLinux realizamos nuestra propia GCS y vemos como, de nuevo, se repiten las mismas actividades: petici\u00f3n de cambio, cambio y liberaci\u00f3n. Usamos dos tipos de peticiones de cambio: Peticiones de cambio Actualizaci\u00f3n de aplicaciones . Si por ejemplo recibimos una petici\u00f3n para actualizar Mozilla Firefox, descargamos desde los repositorios de la distribuci\u00f3n la versi\u00f3n deseada. La probamos en laboratorio registrando cualquier informaci\u00f3n relevante en la petici\u00f3n de cambio. Finalmente, si todo es correcto, se liberan los paquetes a trav\u00e9s de un despliegue migasfree planificando su distribuci\u00f3n (ver A en el diagrama 'Peticiones de cambio'). Personalizaci\u00f3n de aplicaciones . Se produce por ejemplo cuando llega una petici\u00f3n de cambio para a\u00f1adir un motor de b\u00fasqueda de sin\u00f3nimos a Mozilla Firefox. Introducimos entonces en un paquete propio de AZLinux (azl-firefox) el c\u00f3digo que instala dicho motor de b\u00fasqueda y liberamos dicho paquete en un despliegue de migasfree planificando su distribuci\u00f3n (ver B en el diagrama 'Peticiones de cambio'). Las herramientas que usamos actualmente en cada actividad son: En la petici\u00f3n de cambio: Gestor de proyectos: Redmine En el cambio: Editor de textos: Geany IDE: PyCharm Sistema de control de versiones: GitLab Gestor de proyectos: Redmine En la liberaci\u00f3n: Gestor de sistemas: Migasfree Gestor de proyectos: Redmine nota Migasfree nos proporciona, de manera centralizada, conocer el estado, no s\u00f3lo del servidor migasfree, sino de cada uno de los equipos registrados en el servidor, converti\u00e9ndose en una herramienta ideal para hacer una auditor\u00eda tanto de software como de hardware. Beneficios Los principales beneficios que obtendr\u00e1 tu empresa, como resultado de aplicar una GCS, ser\u00edan: Reducci\u00f3n del coste de los servicios de desarrollo y mantenimiento. Optimizaci\u00f3n del uso de los recursos. Y para ti, como administrador: Dispondr\u00e1s de equipos m\u00e1s estables. Vas a pasar de ser un administrador que se echa las manos a la cabeza ante cualquier cambio a ser un administrador favorecedor del cambio, ya que dispones de las herramientas para hacer el seguimento y control de los cambios. Y, en \u00faltima instancia, vas a mejorar sustancialmente la resoluci\u00f3n de incidencias. Caracter\u00edsticas de migasfree Las cosas no se dicen, se hacen, porque al hacerlas se dicen solas. -- Woody Allen. El nacimiento de migasfree En el a\u00f1o 2005, todos grupos pol\u00edticos del Ayuntamiento de Zaragoza manifestaron por unanimidad, en pleno de gobierno municipal, apoyar las pol\u00edticas de uso de Software Libre y, en concreto, el fomento de los programas de SL en el entorno de escritorio del empleado municipal. La Direcci\u00f3n General de Ciencia y Tecnolog\u00eda asume, inicia y potencia este importante reto. 3 Este proyecto se planific\u00f3 en tres etapas: Primera: Migrar a aplicaciones que presentaban un impacto bajo sobre usuarios y t\u00e9cnicos en el Sistema Operativo actual (por aquel entonces, Microsoft Windows XP). Segunda: Migrar la plataforma ofim\u00e1tica Microsoft Office 97 por la suite libre OpenOffice. Tercera: Sustituir el SO Windows XP por un sistema operativo basado en Linux. Esta etapa se inici\u00f3 en 2008 y todav\u00eda sigue abierta. Para iniciar la tercera etapa, se tuvieron que realizar los primeros prototipos de lo que llegar\u00eda a ser la primera versi\u00f3n de AZLinux. En estos prototipos, la personalizaci\u00f3n se realizaba manualmente, en un equipo cuya imagen del disco duro nos serv\u00eda para clonarla en otros equipos y hacer las pertinentes pruebas. En aquel tiempo, aprendimos a empaquetar y empezamos a introducir nuestra personalizaci\u00f3n en nuestros propios paquetes. La ventaja frente a la personalizaci\u00f3n manual era muy significativa. Con los primeras migraciones reales, nos surgi\u00f3 la necesidad de actualizar nuestros paquetes y, despu\u00e9s de probar sin \u00e9xito Zenworks for Linux , decidimos crear nuestros propios repositorios de paquetes. Quisimos emular lo que ya estabamos haciendo con los escritorios XP, esto es, distribuir software bas\u00e1ndonos en el contexto al que pertenec\u00eda un usuario en nuestro LDAP. Con un poco de Bash scripting , en Mayo de 2009, implementamos lo que ser\u00edan unos repositorios din\u00e1micos que se configuraban en el cliente en funci\u00f3n del contexto. Esto fue, sin duda, una gran idea, pero la gesti\u00f3n de estos repositorios din\u00e1micos era manual y muy propensa a errores. La gesti\u00f3n de estos repositorios din\u00e1micos recay\u00f3 en m\u00ed, por lo que decid\u00ed simplificarla inmediatamente y crear el primer prototipo de migasfree . Dos semanas de programaci\u00f3n, en horas no laborales, fueron suficientes para presentar a mis compa\u00f1eros de trabajo un prototipo, que fue puesto en producci\u00f3n en Junio de 2009. nota Una de las ventajas de trabajar con software libre es la facilidad con la que puedes crear proyectos ya que puedes mezclar, como si de piezas de puzzle fueran, diferentes componentes sin preocuparte en exceso del tema de las licencias. Un ejemplo de esto ha sido la incorporaci\u00f3n de la funcionalidad de captura del hardware en los equipos. Utilic\u00e9 el comando lshw y unas pocas l\u00edneas de c\u00f3digo para adaptarlo a la base de datos de migasfree. Versiones El primer prototipo s\u00f3lo trabajaba con paqueter\u00eda rpm y gestor de paquetes yum , y el c\u00f3digo bash que se ejecutaba en el cliente se generaba en el servidor. Despu\u00e9s de usar migasfree un tiempo en producci\u00f3n, vimos que podr\u00eda ser un buen sistema para otras organizaciones, y mis compa\u00f1eros me dieron el impulso necesario para publicar el c\u00f3digo. As\u00ed, durante el verano de 2009, reorganice los men\u00fas, limpi\u00e9 un poco el c\u00f3digo, e hice que migasfree pudiera trabajar con distintas versiones de SO y de sistemas de paqueter\u00eda. Fue publicado en github en abril de 2010 y bautizado como \"migasfree with fried eggs\", porque mis compa\u00f1eros dec\u00edan que el logotipo se parec\u00eda a un huevo frito. \u00a1Qu\u00e9 sabr\u00e1n ellos de Arte! En Noviembre de 2011, Jose Antonio Chavarr\u00eda, desarrollador de AZLinux, reescribe y publica el cliente migasfree . Realiz\u00f3 tambi\u00e9n grandes cambios en la estructura del servidor. Tuvimos que definir la API con la que el cliente y el servidor deb\u00edan comunicarse. Usamos claves asim\u00e9tricas para dotar de seguridad al sistema. Esta nueva versi\u00f3n fue denominada \"migasfree no trans\" supongo que por incorporar un c\u00f3digo m\u00e1s \"limpio\", por decirlo de alguna manera. Poco a poco, fuimos dotando al sistema de nuevas funcionalidades, y para principios de 2013, Jose Antonio Chavarr\u00eda cambi\u00f3 la navegaci\u00f3n y aspecto del servidor. Esta nueva versi\u00f3n fue denominada \"migasfree with chocolate\". En febrero de 2014, liberamos la versi\u00f3n 4 del servidor ( migasfree grape edition ). Esta versi\u00f3n hace uso de bootstrap con el fin de dotar a la aplicaci\u00f3n de un dise\u00f1o web adaptable a distintos dispositivos. Adem\u00e1s, incorpora distintas mejoras de todo tipo. Actualmente es la vers\u00ed\u00f3n que utilizamos en AZLinux. En 2015 nos sumamos a una ola disruptora: docker . Esto nos ha liberado de tener que pelearnos con las dependencias de los componentes que utilizamos en el servidor y de tener que publicar los paquetes que generabamos para distintas distribuciones GNU/Linux (utilizamos versiones de componentes que a\u00fan no han sido liberados y esto nos creaba aut\u00e9nticos quebraderos de cabeza). Con docker hemos conseguido colocar el servidor y sus dependencias en un contenedor virtual (un debian) que puede ejecutarse en cualquier servidor GNU/Linux. Esto nos ha proporcionado una flexibilidad y portabilidad para ejecutar el servidor de una forma muy simple tanto en un equipo f\u00edsico como en la nube. Caracter\u00edsticas Migasfree es simple, y hacemos esfuerzos por mantenerlo as\u00ed. Tendemos a lo que denominamos gesti\u00f3n cero, es decir, procuramos que la gesti\u00f3n de a\u00f1adir nuevas entradas en migasfree no requiera ninguna tarea administrativa. Est\u00e1 basado en la arquitectura cliente/servidor. Es seguro. Las comunicaciones entre cliente y servidor est\u00e1n firmadas con claves asim\u00e9tricas. Es adaptable. Puedes programar tus propias f\u00f3rmulas para obtener los atributos de los ordenadores y usuarios seg\u00fan tus intereses. Es Software Libre licenciado bajo la GNU Public License . Almacena tanto el inventario software y hardware de los equipos, permitiendo hacer consultas sobre ellos. Almacena tambi\u00e9n informaci\u00f3n de los equipos tales como sus atributos, sincronizaciones, migraciones que se han realizado, etc. Consultas. Puedes programar consultas contra la base de datos de migasfree. Gesti\u00f3n de errores. Los errores que se producen en los equipos son enviados al servidor y almacenados, permitiendo hacer su seguimiento. Gesti\u00f3n de fallas. Puedes programar c\u00f3digo que ser\u00e1 ejecutado en los clientes con el fin de obtener informaci\u00f3n de los equipos. Alertas. Permite conocer en tiempo real el estado del sistema facilitando al administrador su trabajo. Estad\u00edsticas. Principales componentes empleados Lenguaje de programaci\u00f3n Python . Django un framework de desarrollo web. Servidor web Nginx . Chaussette como servidor WSGI Base de datos Posgresql . Informaci\u00f3n Hardware: Lshw . Primera ley de la Ingenier\u00eda de Sistemas, Software Configuration Management, Bersoff, Henderson & Siegel, Prentice-Hall, 1980 \u21a9 En AZLinux empleamos como nombre de paquete el prefijo \"azl-\" m\u00e1s el nombre del paquete que queremos personalizar. \u21a9 Eduardo Romero Moreno, Migraci\u00f3n Escritorio Software Libre , 2011 \u21a9","title":"Introducci\u00f3n"},{"location":"part1/#introduccion","text":"","title":"INTRODUCCI\u00d3N"},{"location":"part1/#gestion-de-la-configuracion-software","text":"Nada es permanente a excepci\u00f3n del cambio. -- Her\u00e1clito de \u00c9feso. Estamos acostumbrados a actualizar peri\u00f3dicamente nuestras aplicaciones: los sistemas se hacen obsoletos r\u00e1pidamente, aparecen nuevas tecnolog\u00edas, hay errores que son resueltos, surgen nuevas necesidades. Sin importar en qu\u00e9 momento del ciclo de vida del sistema nos encontremos, el sistema cambiar\u00e1, y el deseo de cambiarlo persistir\u00e1 a lo largo de todo el ciclo de vida. 1 Por tanto, el cambio en el software es inevitable y es deseable que ocurra. Es inevitable porque los desarrolladores cometemos errores y es mediante una modificaci\u00f3n como los corregimos. A este tipo de cambios los llamamos correctivos . Por otro lado, el cambio es deseable ya que a menudo queremos incorporar nuevas funcionalidades al software o mejorar aquellas que ya exist\u00edan. Mediante los cambios evolutivos es como mejoramos el software. El cambio genera confusi\u00f3n e incertidumbre y se produce desde que concebimos, constru\u00edmos y tambi\u00e9n mientras mantenemos un proyecto software. El gran reto reside precisamente en gestionar de forma controlada dichos cambios usando alguna estrategia que los favorezca y facilite. De esto trata precisamente la Gesti\u00f3n de la Configuraci\u00f3n Software (GCS), un proceso de la Ingenier\u00eda del Software que identifica, hace seguimiento y controla cada uno de los cambios que se producen en los sistemas.","title":"Gesti\u00f3n de la Configuraci\u00f3n Software"},{"location":"part1/#objetivo","text":"El objetivo de la GCS es conservar la integridad de los sistemas frente a los cambios. Un sistema ser\u00e1 \u00edntegro frente al cambio si: Mantiene correctamente las relaciones entre los distintos cambios a medida que se van produciendo (el t\u00edpico problema de dependencias entre elementos). Permite la auditor\u00eda de cambios (conocimiento del estado de un sistema al que se le han ido aplicando cambios sucesivamente).","title":"Objetivo"},{"location":"part1/#el-proceso","text":"El proceso de la GCS es un conjunto de actividades que nos permitir\u00e1 garantizar dicha integridad, y que podemos resumir en: Petici\u00f3n de cambio. Cambio. Liberaci\u00f3n.","title":"El proceso"},{"location":"part1/#peticion-de-cambio","text":"Cuando se nos reporta un error o una petici\u00f3n de mejora, lo primero que hacemos es identificar el Elemento de Configuraci\u00f3n Software (ECS) al que se refiere. Un ECS es cualquier objeto software sometido a la GCS. Puede ser un manual de usuario, una especificaci\u00f3n, un conjunto de datos para realizar tests, una aplicaci\u00f3n, una librer\u00eda, incluso las herramientas que se usan para realizar dichos cambios, etc. Una vez identificado el ECS se registra la petici\u00f3n de cambio. Las herramientas t\u00edpicas para registrar y hacer el seguimiento del cambio son los denominados gestores de proyectos (Redmine, Bugzilla, Tracker, etc.) Cada petici\u00f3n de cambio es analizada m\u00e1s tarde pudiendo ser aceptada o rechazada. Si es rechazada, se avisa al informador y se cierra la petici\u00f3n. Si es aceptada, se asigna la petici\u00f3n a alguien para que realice dicho cambio.","title":"Petici\u00f3n de cambio"},{"location":"part1/#cambio","text":"El cambio es la actividad que modifica el ECS, generando una nueva versi\u00f3n del ECS. En esta actividad se utilizan un conjunto muy diverso de herramientas, desde procesadores y editores de texto, sistemas de control de versiones, entornos de desarrollo integrados (IDE), depuradores, compiladores...","title":"Cambio"},{"location":"part1/#liberacion","text":"La liberaci\u00f3n es la actividad de situar la nueva versi\u00f3n del ECS generada, en un repositorio o almac\u00e9n para que posteriormente los clientes del ECS puedan acceder a \u00e9l e instalarlo.","title":"Liberaci\u00f3n"},{"location":"part1/#elemento-de-configuracion-software","text":"Si observamos como los diferentes proyectos de Software Libre realizan la GCS, vemos que realizan las actividades mencionadas liberando finalmente el c\u00f3digo fuente del proyecto en Internet. Estos proyectos trabajan con distintos tipos de ECS (.png, .txt, .py, .c, .bin, etc.) usando los Sistemas de Control de Versiones , junto con las plataformas de desarrollo colaborativo como sourceforge.net, github.com, etc. Este c\u00f3digo fuente ser\u00e1 posteriormente compilado por los mantenedores de las distribuciones GNU/Linux (Fedora, Red Hat, Debian, Ubuntu, etc.), realizando su propia GCS. Pero a diferencia de los primeros, las Distribuciones GNU/Linux s\u00f3lo trabajan sobre un \u00fanico tipo de ECS: el paquete , donde introducir\u00e1n el programa ya compilado. Este simple hecho permite garantizar la integridad frente a los cambios de forma eficaz y sencilla, como veremos a continuaci\u00f3n.","title":"Elemento de Configuraci\u00f3n Software"},{"location":"part1/#el-paquete","text":"Un paquete es un contenedor que encapsula un conjunto de ECS liberados por un determinado proyecto, junto a su metainformaci\u00f3n. Contendr\u00e1, por tanto, el programa compilado para una determinada distribuci\u00f3n y arquitectura, m\u00e1s un amplio conjunto de informaci\u00f3n, como puede ser: El autor del programa. La direcci\u00f3n del repositorio del proyecto. La versi\u00f3n del ECS. La arquitectura. El nombre y direcci\u00f3n e-mail del empaquetador. La fecha de empaquetado. El nombre del equipo en que se produjo el empaquetado. Una descripci\u00f3n corta del contenido del paquete. Una descripci\u00f3n larga. Pero, adem\u00e1s, suelen incluir: Dependencias con otros paquetes. C\u00f3digo a ejecutar antes y despu\u00e9s de: Instalar. Actualizar. Eliminar el paquete. Una vez que un mantenedor de una Distribuci\u00f3n GNU/Linux ha creado un paquete, lo libera poni\u00e9ndolo en un repositorio p\u00fablico a disposici\u00f3n de los clientes.","title":"El paquete"},{"location":"part1/#puesta-en-produccion","text":"Los encargados de aplicar los cambios son los programas denominados gestores de paquetes tales como yum , zypper o apt . Un gestor de paquetes es un programa que permite poner en producci\u00f3n los cambios que han sido liberados en los repositorios. La actualizaci\u00f3n de un equipo se realiza comparando las versiones de los paquetes instalados con los paquetes de los repositorios p\u00fablicos, detectando los que han aumentado su versi\u00f3n, resolviendo sus dependencias y finalmente, si no hay conflictos, obtienen desde los repositorios los paquetes necesarios. Una vez han descargado los paquetes, dan \u00f3rdenes a los backends ( rpm , dpkg , etc.), para que se produzca la desinstalaci\u00f3n de los paquetes antiguos y la instalaci\u00f3n de los nuevos. Los backends abren el paquete, y grosso modo: 1. Extraen los ficheros del programa copi\u00e1ndolos en el sistema, y ejecutan adem\u00e1s el c\u00f3digo programado para antes y despu\u00e9s de la actualizaci\u00f3n. 2. La metainformaci\u00f3n es extra\u00edda del paquete y se almacena en la base de datos del backend. Dec\u00eda Ian Murdock, fundador de Debian, que el gran aporte del software libre a la industria, ha sido precisamente la invenci\u00f3n del sistema de paqueter\u00eda (paquete, repositorio, gestor de paquetes). Y no es para menos, ya que este sistema nos proporciona los dos requisitos necesarios que garantizan la integridad frente a los cambios: El control de dependencias, mediante el gestor de paquetes. La auditor\u00eda, mediante las consultas a la base de datos del backend. nota Si est\u00e1s acostumbrado a instalar programas mediante el t\u00edpico \u201c./configure, make, install\u201d, tienes que ser consciente que est\u00e1s rompiendo la integridad frente a los cambios, ya que la base de datos del backend no es actualizada con este procedimiento. Todo lo que no sea instalar programas mediante el gestor de paquetes o el backend, rompe la integridad. A continuaci\u00f3n, se muestra una tabla con las operaciones m\u00e1s comunes que puedes emplear sobre algunos de los gestores de paquetes m\u00e1s conocidos: Operaciones Gestores apt yum zypper Actualizar listado de paquetes disponibles apt-get update yum check-update zypper refresh Actualizar sistema apt-get upgrade yum update zypper update Instalar paquete apt-get install <pkg> yum install <pkg> zypper install<pkg> Borrar paquete apt-get remove <pkg> yum erase <pkg> zypper remove <pkg> Buscar paquete apt-cache yum list zypper search Buscar repositorio de un paquete apt-cache madison <pkg> yum whatprovides <pkg> zypper whatprovides <pkg> Veamos ahora las operaciones m\u00e1s comunes que puedes emplear sobre los backends dpkg y rpm : Operaciones Backends dpkg rpm Instalar fichero de paquete dpkg -i <file.deb> rpm -ivh <file.rpm> Borrar paquete dpkg -r <pkg> rpm -e <pkg> Paquete que instala el fichero <file> dpkg -S <file> rpm -qf <file> Ficheros del paquete dpkg -L <pkg> rpm -ql <pkg> Descripci\u00f3n del paquete dpkg -s <pkg> rpm -qi <pkg> Paquetes instalados dpkg -l rpm -qa","title":"Puesta en producci\u00f3n"},{"location":"part1/#administrando-escritorios","text":"En todo lo que nos rodea y en todo lo que nos mueve, debemos advertir que interviene en algo la casualidad. -- Anatole France. En el cap\u00edtulo anterior, hemos hablado de la GCS y de c\u00f3mo las distribuciones GNU/Linux utilizan el sistema de paqueter\u00eda para garantizar la integridad frente al cambio. Si tienes un equipo dom\u00e9stico, todos los cambios producidos y liberados por los distintos proyectos y que hayan sido empaquetados y liberados por tu distribuci\u00f3n GNU/Linux, ser\u00e1n instalados convenientemente con el simple hecho de dar la orden al gestor de paquetes para que actualice tu sistema. Ahora bien, en una organizaci\u00f3n donde se requiera administrar los escritorios esto no es suficiente, veamos el porqu\u00e9.","title":"Administrando escritorios"},{"location":"part1/#la-personalizacion","text":"La primera dificultad importante a la que se va a enfrentar un administrador, va a ser la de la personalizaci\u00f3n. Imagina que tienes que migrar y administrar 1000 equipos a GNU/Linux y que tienes en tu red un servicio NTP, requiri\u00e9ndose que todos tus escritorios est\u00e9n con la hora sincronizada con este servicio. Vas a tener que personalizar el cliente NTP en todos tus escritorios. Una manera que se suele utilizar es instalar en un equipo una distribuci\u00f3n GNU/Linux desde un DVD, editar el fichero de configuraci\u00f3n del cliente NTP y configurar la IP (o el nombre DNS) del servidor donde se encuentra el servcio NTP. Despu\u00e9s, puedes crear una imagen del disco duro con un sistema de clonado como pueda ser Clonezilla y clonar uno a uno los equipos usando dicha imagen. Con este m\u00e9todo, la personalizaci\u00f3n inicial reside en dicha imagen, pero sigamos imaginando... Un d\u00eda, a mitad de migraci\u00f3n, recibes un correo y lees: \"Alberto: El servicio NTP dejar\u00e1 de dar servicio a partir del d\u00eda 10. En su lugar vamos a disponer de un nuevo servicio, llamado QueHoraEs, que es mucho mejor porque...\" En este momento, ya estar\u00e1s pensando en los 400 equipos que tienes migrados y te echar\u00e1s las manos a la cabeza porque es evidente que este sistema de personalizaci\u00f3n no es adecuado. nota La personalizaci\u00f3n inicial es muy sencilla de realizar, pero un cambio en la personalizaci\u00f3n puede darse en cualquier momento, y tienes que estar preparado para poder realizarlo.","title":"La personalizaci\u00f3n"},{"location":"part1/#gestores-de-sistemas","text":"Afortunadamente, existen unas herramientas denominadas Gestores de Sistemas ( Systems Management Systems ), que pueden ayudarnos en la administraci\u00f3n de los escritorios. Algunos de estos Gestores de Sistemas se centran en la adquisici\u00f3n del estado de los equipos como Nagios , y otros permiten automatizar tareas mediante la ejecuci\u00f3n de c\u00f3digo en los equipos de manera centralizada como Zenworks , Landscape , chef , puppet , cfengine , ansible . Los Gestores de Sistemas est\u00e1n muy influidos por las iniciativas realizadas en los sistemas de gesti\u00f3n de redes de telecomunicaciones, pudiendo realizar una o un conjunto de las siguientes tareas: Inventario hardware. Monitoreado de disponibilidad de servidores y mediciones. Inventario e instalaci\u00f3n de software. Gesti\u00f3n de antivirus y anti-malware. Monitoreado de las actividades de los usuarios. Monitoreado de la capacidad de los sistemas. Gesti\u00f3n de seguridad. Gesti\u00f3n de almacenamiento. Monitoreado de la utilizaci\u00f3n y capacidades de la red. Estas tareas podemos clasificarlas de acuerdo a FCAPS , un modelo y marco de trabajo de red de la gesti\u00f3n de telecomunicaciones de ISO para la gesti\u00f3n de redes. FCAPS es un acr\u00f3nimo de Fault, Configuration, Accounting, Performance, Security (Falla, Configuraci\u00f3n, Contabilidad, Desempe\u00f1o, Seguridad), que son las categor\u00edas en las cuales el modelo ISO define las tareas de gesti\u00f3n de redes. Fault (Fallas): Es un evento que tiene un significado negativo. Su objetivo es reconocer, aislar , corregir y registrar fallos. Puede utilizar an\u00e1lisis de tendencias para predecir errores. Cuando se detecta un fallo o evento, se env\u00eda una notificaci\u00f3n. Configuration (Configuraci\u00f3n): En el proceso de gesti\u00f3n de la configuraci\u00f3n, las operaciones diarias son monitoreadas y controladas. Los objetivos de la gesti\u00f3n de la configuraci\u00f3n son: Recolectar informaci\u00f3n. Modificar la configuraci\u00f3n. Generaci\u00f3n de reportes Gesti\u00f3n de cambios. Los cambios de Hardware y Software son controlados por este proceso: Actualizaci\u00f3n, Instalaci\u00f3n y eliminaci\u00f3n de programas. Actualizaci\u00f3n, Instalaci\u00f3n y eliminaci\u00f3n de equipamiento (impresoras, scaners, memoria, etc.) Este proceso debe tener en cuenta: Permitir acceso r\u00e1pido a la informaci\u00f3n de la configuraci\u00f3n. Facilitar la configuraci\u00f3n remota de los dispositivos. Proporcionar un inventario actualizado de Software y Hardware. Simplificaci\u00f3n de la configuraci\u00f3n de dispositivos. El seguimiento de cambios a la configuraci\u00f3n. Accounting (Contabilidad): Su objetivo es reunir las estad\u00edsticas de los usuarios. Performance (Desempe\u00f1o). Recolentando y analizando los datos de rendimiento, el estado general de los sistemas pueden ser monitorizado. Las tendencias pueden avisar de fallos de capacidad o de cuestiones relacionadas con la fiabilidad de los sistemas, antes de que en estos ocurran. Umbrales de rendimiento pueden ser establecidos para lanzar alarmas que ser\u00edan controladas por la gesti\u00f3n de fallos habitual. Las alarmas se pueden clasificar atendiendo al grado de severidad. Security (Seguridad). Se encarga de controlar el acceso a recursos de red. La seguridad de los datos puede ser conseguida con la autenticaci\u00f3n, cifrado y permisos, principalmente. nota Migasfreee atendiendo a FCAPS, tiene capacidades de Faults, Configuration y Accounting. Un ejemplo de funcionamiento t\u00edpico de un Gestor de Sistemas que incorpore tareas de Configuration usar\u00eda un lenguaje que especificar\u00eda a qu\u00e9 estado se quiere llevar a los equipos, no c\u00f3mo llegar a ese estado. En nuestro caso, ser\u00eda algo parecido a esto: aseg\u00farate de que el paquete ntp-client est\u00e1 desinstalado, aseg\u00farate de que el paquete quehoraes-client est\u00e1 instalado, aseg\u00farate de que el fichero de configuraci\u00f3n de quehoraes-client es el mismo que el que est\u00e1 en el servidor. Peri\u00f3dicamente, los clientes se conectar\u00edan al servidor para obtener este c\u00f3digo que ser\u00e1 ejecutado mediante el int\u00e9rprete propio del Gestor de Sistemas instalado en el cliente. Este sistema permite automatizar aquellas tareas que realizan a menudo los administradores de sistemas, y aunque algunos Gestores de Sistemas se las ingenian para llevar un control de versiones, mantienen una base de datos independiente a la de los backends de los gestores de paquetes, dejando en entredicho todo lo relativo a la integridad de los sistemas.","title":"Gestores de Sistemas"},{"location":"part1/#empaquetando-la-personalizacion","text":"En AZLinux usamos otro m\u00e9todo: empaquetamos siempre la personalizaci\u00f3n. Para el caso del cliente \u201cQueHoraEs\u201d, crear\u00edamos el paquete azl-quehoraes-client 2 con la siguiente informaci\u00f3n: Dependencias: quehoraes-client Obsoletos: ntp-client En el script de postinstalaci\u00f3n escribir\u00edamos el siguiente c\u00f3digo: En el fichero de configuraci\u00f3n del cliente QueHoraes, modificar el valor de la entrada \u201cserver=\u201d por la IP del servidor QueHoraEs \u00a1Listo! Con esto queda garantizada la integridad frente al cambio de la personalizaci\u00f3n, aprovech\u00e1ndonos de la integridad que nos proporciona el sistema de paqueter\u00eda de nuestra distribuci\u00f3n GNU/Linux. Una vez empaquetada nuestra personalizaci\u00f3n, se hace relativamente sencillo realizar cualquier cambio posterior en ella. Pero crear un paquete desde cero para personalizar una distribuci\u00f3n GNU/Linux no es tan f\u00e1cil, no tanto por la creaci\u00f3n del paquete en s\u00ed, sino porque la personalizaci\u00f3n requiere de los conocimientos suficientes sobre el sistema GNU/Linux y sobre la propia aplicaci\u00f3n que se personaliza. nota Empaquetar la personalizaci\u00f3n nos asegura la integridad de los sistemas frente a sus cambios. Date cuenta que no es necesario ning\u00fan Gestor de Sistemas para instalar dicha personalizaci\u00f3n. S\u00f3lo necesitas el Gestor de Paquetes, y \u00e9ste siempre lo tienes disponible en cualquier distribuci\u00f3n GNU/Linux.","title":"Empaquetando la personalizaci\u00f3n"},{"location":"part1/#niveles-de-personalizacion","text":"Las aplicaciones suelen incorporar dos niveles de personalizaci\u00f3n: La del usuario. La del sistema (para todos los usuarios del sistema). La personalizaci\u00f3n del usuario es prioritaria a la del sistema, siempre y cuando esta \u00faltima no sea obligatoria. Es conveniente conocer si la aplicaci\u00f3n que vas a configurar incorpora la personalizaci\u00f3n a nivel de sistema, ya que \u00e9sta es la que se tendr\u00e1 que configurar. En los casos en que las aplicaciones s\u00f3lo tengan la configuraci\u00f3n a nivel de usuario, o en los casos en los que se requiera, tendr\u00e1s que recorrer todos los usuarios para aplicar la personalizaci\u00f3n a cada uno de ellos.","title":"Niveles de personalizaci\u00f3n"},{"location":"part1/#la-liberacion","text":"Es el segundo problema importante con el que vas a tener que lidiar. Por un lado, debes independizarte de los repositorios p\u00fablicos de tu distribuci\u00f3n GNU/Linux, por el simple motivo de que no puedes permitir que el control de los cambios que se instalar\u00e1n en tus m\u00e1quinas, lo tenga tu distribuci\u00f3n GNU/Linux en vez de tu organizaci\u00f3n. \u00bfImaginas que habr\u00eda pasado en AZLinux cuando OpenSuSE sustituy\u00f3 OpenOffice por LibreOffice? Cuando los usuarios hubieran encendido las m\u00e1quinas a las 8:00 de la ma\u00f1ana, se iniciar\u00eda la actualizaci\u00f3n a LibreOffice autom\u00e1ticamente pudi\u00e9ndose producir muchas incidencias. \u00bfFuncionar\u00eda todo? \u00bfNo es mejor probar LibreOffice en tu organizaci\u00f3n antes de que se instale en todos tus equipos? Tener la posibilidad de deshacer un cambio que se haya determinado como no deseado es importante. Tienes que decidir por ti mismo el software que deben tener tus usuarios y, por tanto, debes tener los gestores de paquetes configurados contra tus propios repositorios de paquetes y gestionarlos de alguna manera. Adem\u00e1s, es conveniente que puedas planificar a qui\u00e9n y cu\u00e1ndo se deben liberar dichos cambios. Imagina nuevamente el ejemplo de la sustituci\u00f3n de OpenOffice por LibreOffice. Estar\u00edamos hablando de una actualizaci\u00f3n de cerca de 500 MB por equipo que, multiplicado por todos los equipos de una organizaci\u00f3n, podr\u00eda resultar en mucho tr\u00e1fico de red. Una ventaja de planificar la liberaci\u00f3n es que permite distribuir poco a poco los cambios, de tal manera que, si hay errores, afectar\u00e1 inicialmente a muy pocos equipos, permitiendo actuar de manera m\u00e1s relajada para corregir cualquier incidencia. Por todo esto, y como los repositorios est\u00e1ndar de las distribuciones no tienen ning\u00fan mecanismo de planificaci\u00f3n de la liberaci\u00f3n, es por lo que decidimos desarrollar migasfree, extendiendo el concepto de repositorio de paquetes al concepto de despliegue: repositorio de paquetes din\u00e1mico y planificable.","title":"La liberaci\u00f3n"},{"location":"part1/#despliegue-migasfree","text":"Un despliegue de migasfree es, simplemente, un repositorio est\u00e1ndar m\u00e1s la capacidad de poder especificar, de forma centralizada, cu\u00e1ndo y qui\u00e9n accede a ese repositorio. Veamos como act\u00faa migasfree en lo relativo a los repositorios: Los cambios que se quieren liberar son empaquetados y subidos a un servidor migasfree. Se crea un despliegue con los paquetes subidos y se establece a qui\u00e9n (atributos de usuario + equipo) y en qu\u00e9 momento se deben aplicar dichos cambios. El servidor migasfree crea un repositorio f\u00edsico (id\u00e9ntico al de cualquier distribuci\u00f3n GNU/Linux) con dichos paquetes, utilizando las herramientas est\u00e1ndar de creaci\u00f3n de repositorios ( createrepo para paqueter\u00eda RPM o dpkg-scanpackages para paqueter\u00eda Debian). Cuando un cliente migasfree se conecta al servidor env\u00eda sus atributos al servidor. El servidor consulta los despliegues para determinar, en funci\u00f3n de esos atributos enviados, la lista de los repositorios f\u00edsicos que tiene el cliente a su disposici\u00f3n y se los env\u00eda al cliente. El cliente migasfree configura la lista de los repositorios f\u00edsicos recibidos desde el servidor en el Gestor de Paquetes. A continuaci\u00f3n, el cliente migasfree da instrucciones al Gestor de Paquetes para que se produzca la eliminaci\u00f3n, instalaci\u00f3n y actualizaci\u00f3n de los paquetes desde los repositorios f\u00edsicos.","title":"Despliegue Migasfree"},{"location":"part1/#la-gcs-en-tu-organizacion","text":"En el cap\u00edtulo anterior, hemos visto el proceso de la GCS en los distintos proyectos de software libre y tambi\u00e9n en las distribuciones GNU/Linux. Pues bien, en una organizaci\u00f3n tambi\u00e9n debe realizarse el proceso de la GCS. Proceso GCS en tu organizaci\u00f3n con migasfree Un usuario hace una petici\u00f3n de cambio. Un desarrollador programa el cambio de la configuraci\u00f3n software dentro de un paquete y lo sube a un servidor migasfree. La liberaci\u00f3n es realizada por el servidor migasfree a los ordenadores requeridos. En AZLinux realizamos nuestra propia GCS y vemos como, de nuevo, se repiten las mismas actividades: petici\u00f3n de cambio, cambio y liberaci\u00f3n. Usamos dos tipos de peticiones de cambio: Peticiones de cambio Actualizaci\u00f3n de aplicaciones . Si por ejemplo recibimos una petici\u00f3n para actualizar Mozilla Firefox, descargamos desde los repositorios de la distribuci\u00f3n la versi\u00f3n deseada. La probamos en laboratorio registrando cualquier informaci\u00f3n relevante en la petici\u00f3n de cambio. Finalmente, si todo es correcto, se liberan los paquetes a trav\u00e9s de un despliegue migasfree planificando su distribuci\u00f3n (ver A en el diagrama 'Peticiones de cambio'). Personalizaci\u00f3n de aplicaciones . Se produce por ejemplo cuando llega una petici\u00f3n de cambio para a\u00f1adir un motor de b\u00fasqueda de sin\u00f3nimos a Mozilla Firefox. Introducimos entonces en un paquete propio de AZLinux (azl-firefox) el c\u00f3digo que instala dicho motor de b\u00fasqueda y liberamos dicho paquete en un despliegue de migasfree planificando su distribuci\u00f3n (ver B en el diagrama 'Peticiones de cambio'). Las herramientas que usamos actualmente en cada actividad son: En la petici\u00f3n de cambio: Gestor de proyectos: Redmine En el cambio: Editor de textos: Geany IDE: PyCharm Sistema de control de versiones: GitLab Gestor de proyectos: Redmine En la liberaci\u00f3n: Gestor de sistemas: Migasfree Gestor de proyectos: Redmine nota Migasfree nos proporciona, de manera centralizada, conocer el estado, no s\u00f3lo del servidor migasfree, sino de cada uno de los equipos registrados en el servidor, converti\u00e9ndose en una herramienta ideal para hacer una auditor\u00eda tanto de software como de hardware.","title":"La GCS en tu organizaci\u00f3n"},{"location":"part1/#beneficios","text":"Los principales beneficios que obtendr\u00e1 tu empresa, como resultado de aplicar una GCS, ser\u00edan: Reducci\u00f3n del coste de los servicios de desarrollo y mantenimiento. Optimizaci\u00f3n del uso de los recursos. Y para ti, como administrador: Dispondr\u00e1s de equipos m\u00e1s estables. Vas a pasar de ser un administrador que se echa las manos a la cabeza ante cualquier cambio a ser un administrador favorecedor del cambio, ya que dispones de las herramientas para hacer el seguimento y control de los cambios. Y, en \u00faltima instancia, vas a mejorar sustancialmente la resoluci\u00f3n de incidencias.","title":"Beneficios"},{"location":"part1/#caracteristicas-de-migasfree","text":"Las cosas no se dicen, se hacen, porque al hacerlas se dicen solas. -- Woody Allen.","title":"Caracter\u00edsticas de migasfree"},{"location":"part1/#el-nacimiento-de-migasfree","text":"En el a\u00f1o 2005, todos grupos pol\u00edticos del Ayuntamiento de Zaragoza manifestaron por unanimidad, en pleno de gobierno municipal, apoyar las pol\u00edticas de uso de Software Libre y, en concreto, el fomento de los programas de SL en el entorno de escritorio del empleado municipal. La Direcci\u00f3n General de Ciencia y Tecnolog\u00eda asume, inicia y potencia este importante reto. 3 Este proyecto se planific\u00f3 en tres etapas: Primera: Migrar a aplicaciones que presentaban un impacto bajo sobre usuarios y t\u00e9cnicos en el Sistema Operativo actual (por aquel entonces, Microsoft Windows XP). Segunda: Migrar la plataforma ofim\u00e1tica Microsoft Office 97 por la suite libre OpenOffice. Tercera: Sustituir el SO Windows XP por un sistema operativo basado en Linux. Esta etapa se inici\u00f3 en 2008 y todav\u00eda sigue abierta. Para iniciar la tercera etapa, se tuvieron que realizar los primeros prototipos de lo que llegar\u00eda a ser la primera versi\u00f3n de AZLinux. En estos prototipos, la personalizaci\u00f3n se realizaba manualmente, en un equipo cuya imagen del disco duro nos serv\u00eda para clonarla en otros equipos y hacer las pertinentes pruebas. En aquel tiempo, aprendimos a empaquetar y empezamos a introducir nuestra personalizaci\u00f3n en nuestros propios paquetes. La ventaja frente a la personalizaci\u00f3n manual era muy significativa. Con los primeras migraciones reales, nos surgi\u00f3 la necesidad de actualizar nuestros paquetes y, despu\u00e9s de probar sin \u00e9xito Zenworks for Linux , decidimos crear nuestros propios repositorios de paquetes. Quisimos emular lo que ya estabamos haciendo con los escritorios XP, esto es, distribuir software bas\u00e1ndonos en el contexto al que pertenec\u00eda un usuario en nuestro LDAP. Con un poco de Bash scripting , en Mayo de 2009, implementamos lo que ser\u00edan unos repositorios din\u00e1micos que se configuraban en el cliente en funci\u00f3n del contexto. Esto fue, sin duda, una gran idea, pero la gesti\u00f3n de estos repositorios din\u00e1micos era manual y muy propensa a errores. La gesti\u00f3n de estos repositorios din\u00e1micos recay\u00f3 en m\u00ed, por lo que decid\u00ed simplificarla inmediatamente y crear el primer prototipo de migasfree . Dos semanas de programaci\u00f3n, en horas no laborales, fueron suficientes para presentar a mis compa\u00f1eros de trabajo un prototipo, que fue puesto en producci\u00f3n en Junio de 2009. nota Una de las ventajas de trabajar con software libre es la facilidad con la que puedes crear proyectos ya que puedes mezclar, como si de piezas de puzzle fueran, diferentes componentes sin preocuparte en exceso del tema de las licencias. Un ejemplo de esto ha sido la incorporaci\u00f3n de la funcionalidad de captura del hardware en los equipos. Utilic\u00e9 el comando lshw y unas pocas l\u00edneas de c\u00f3digo para adaptarlo a la base de datos de migasfree.","title":"El nacimiento de migasfree"},{"location":"part1/#versiones","text":"El primer prototipo s\u00f3lo trabajaba con paqueter\u00eda rpm y gestor de paquetes yum , y el c\u00f3digo bash que se ejecutaba en el cliente se generaba en el servidor. Despu\u00e9s de usar migasfree un tiempo en producci\u00f3n, vimos que podr\u00eda ser un buen sistema para otras organizaciones, y mis compa\u00f1eros me dieron el impulso necesario para publicar el c\u00f3digo. As\u00ed, durante el verano de 2009, reorganice los men\u00fas, limpi\u00e9 un poco el c\u00f3digo, e hice que migasfree pudiera trabajar con distintas versiones de SO y de sistemas de paqueter\u00eda. Fue publicado en github en abril de 2010 y bautizado como \"migasfree with fried eggs\", porque mis compa\u00f1eros dec\u00edan que el logotipo se parec\u00eda a un huevo frito. \u00a1Qu\u00e9 sabr\u00e1n ellos de Arte! En Noviembre de 2011, Jose Antonio Chavarr\u00eda, desarrollador de AZLinux, reescribe y publica el cliente migasfree . Realiz\u00f3 tambi\u00e9n grandes cambios en la estructura del servidor. Tuvimos que definir la API con la que el cliente y el servidor deb\u00edan comunicarse. Usamos claves asim\u00e9tricas para dotar de seguridad al sistema. Esta nueva versi\u00f3n fue denominada \"migasfree no trans\" supongo que por incorporar un c\u00f3digo m\u00e1s \"limpio\", por decirlo de alguna manera. Poco a poco, fuimos dotando al sistema de nuevas funcionalidades, y para principios de 2013, Jose Antonio Chavarr\u00eda cambi\u00f3 la navegaci\u00f3n y aspecto del servidor. Esta nueva versi\u00f3n fue denominada \"migasfree with chocolate\". En febrero de 2014, liberamos la versi\u00f3n 4 del servidor ( migasfree grape edition ). Esta versi\u00f3n hace uso de bootstrap con el fin de dotar a la aplicaci\u00f3n de un dise\u00f1o web adaptable a distintos dispositivos. Adem\u00e1s, incorpora distintas mejoras de todo tipo. Actualmente es la vers\u00ed\u00f3n que utilizamos en AZLinux. En 2015 nos sumamos a una ola disruptora: docker . Esto nos ha liberado de tener que pelearnos con las dependencias de los componentes que utilizamos en el servidor y de tener que publicar los paquetes que generabamos para distintas distribuciones GNU/Linux (utilizamos versiones de componentes que a\u00fan no han sido liberados y esto nos creaba aut\u00e9nticos quebraderos de cabeza). Con docker hemos conseguido colocar el servidor y sus dependencias en un contenedor virtual (un debian) que puede ejecutarse en cualquier servidor GNU/Linux. Esto nos ha proporcionado una flexibilidad y portabilidad para ejecutar el servidor de una forma muy simple tanto en un equipo f\u00edsico como en la nube.","title":"Versiones"},{"location":"part1/#caracteristicas","text":"Migasfree es simple, y hacemos esfuerzos por mantenerlo as\u00ed. Tendemos a lo que denominamos gesti\u00f3n cero, es decir, procuramos que la gesti\u00f3n de a\u00f1adir nuevas entradas en migasfree no requiera ninguna tarea administrativa. Est\u00e1 basado en la arquitectura cliente/servidor. Es seguro. Las comunicaciones entre cliente y servidor est\u00e1n firmadas con claves asim\u00e9tricas. Es adaptable. Puedes programar tus propias f\u00f3rmulas para obtener los atributos de los ordenadores y usuarios seg\u00fan tus intereses. Es Software Libre licenciado bajo la GNU Public License . Almacena tanto el inventario software y hardware de los equipos, permitiendo hacer consultas sobre ellos. Almacena tambi\u00e9n informaci\u00f3n de los equipos tales como sus atributos, sincronizaciones, migraciones que se han realizado, etc. Consultas. Puedes programar consultas contra la base de datos de migasfree. Gesti\u00f3n de errores. Los errores que se producen en los equipos son enviados al servidor y almacenados, permitiendo hacer su seguimiento. Gesti\u00f3n de fallas. Puedes programar c\u00f3digo que ser\u00e1 ejecutado en los clientes con el fin de obtener informaci\u00f3n de los equipos. Alertas. Permite conocer en tiempo real el estado del sistema facilitando al administrador su trabajo. Estad\u00edsticas.","title":"Caracter\u00edsticas"},{"location":"part1/#principales-componentes-empleados","text":"Lenguaje de programaci\u00f3n Python . Django un framework de desarrollo web. Servidor web Nginx . Chaussette como servidor WSGI Base de datos Posgresql . Informaci\u00f3n Hardware: Lshw . Primera ley de la Ingenier\u00eda de Sistemas, Software Configuration Management, Bersoff, Henderson & Siegel, Prentice-Hall, 1980 \u21a9 En AZLinux empleamos como nombre de paquete el prefijo \"azl-\" m\u00e1s el nombre del paquete que queremos personalizar. \u21a9 Eduardo Romero Moreno, Migraci\u00f3n Escritorio Software Libre , 2011 \u21a9","title":"Principales componentes empleados"},{"location":"part1/admin/","text":"Administrando escritorios En todo lo que nos rodea y en todo lo que nos mueve, debemos advertir que interviene en algo la casualidad. -- Anatole France. En el cap\u00edtulo anterior, hemos hablado de la GCS y de c\u00f3mo las distribuciones GNU/Linux utilizan el sistema de paqueter\u00eda para garantizar la integridad frente al cambio. Si tienes un equipo dom\u00e9stico, todos los cambios producidos y liberados por los distintos proyectos y que hayan sido empaquetados y liberados por tu distribuci\u00f3n GNU/Linux, ser\u00e1n instalados convenientemente con el simple hecho de dar la orden al gestor de paquetes para que actualice tu sistema. Ahora bien, en una organizaci\u00f3n donde se requiera administrar los escritorios esto no es suficiente, veamos el porqu\u00e9. La personalizaci\u00f3n La primera dificultad importante a la que se va a enfrentar un administrador, va a ser la de la personalizaci\u00f3n. Imagina que tienes que migrar y administrar 1000 equipos a GNU/Linux y que tienes en tu red un servicio NTP, requiri\u00e9ndose que todos tus escritorios est\u00e9n con la hora sincronizada con este servicio. Vas a tener que personalizar el cliente NTP en todos tus escritorios. Una manera que se suele utilizar es instalar en un equipo una distribuci\u00f3n GNU/Linux desde un DVD, editar el fichero de configuraci\u00f3n del cliente NTP y configurar la IP (o el nombre DNS) del servidor donde se encuentra el servcio NTP. Despu\u00e9s, puedes crear una imagen del disco duro con un sistema de clonado como pueda ser Clonezilla y clonar uno a uno los equipos usando dicha imagen. Con este m\u00e9todo, la personalizaci\u00f3n inicial reside en dicha imagen, pero sigamos imaginando... Un d\u00eda, a mitad de migraci\u00f3n, recibes un correo y lees: \"Alberto: El servicio NTP dejar\u00e1 de dar servicio a partir del d\u00eda 10. En su lugar vamos a disponer de un nuevo servicio, llamado QueHoraEs, que es mucho mejor porque...\" En este momento, ya estar\u00e1s pensando en los 400 equipos que tienes migrados y te echar\u00e1s las manos a la cabeza porque es evidente que este sistema de personalizaci\u00f3n no es adecuado. nota La personalizaci\u00f3n inicial es muy sencilla de realizar, pero un cambio en la personalizaci\u00f3n puede darse en cualquier momento, y tienes que estar preparado para poder realizarlo. Gestores de Sistemas Afortunadamente, existen unas herramientas denominadas Gestores de Sistemas ( Systems Management Systems ), que pueden ayudarnos en la administraci\u00f3n de los escritorios. Algunos de estos Gestores de Sistemas se centran en la adquisici\u00f3n del estado de los equipos como Nagios , y otros permiten automatizar tareas mediante la ejecuci\u00f3n de c\u00f3digo en los equipos de manera centralizada como Zenworks , Landscape , chef , puppet , cfengine , ansible . Los Gestores de Sistemas est\u00e1n muy influidos por las iniciativas realizadas en los sistemas de gesti\u00f3n de redes de telecomunicaciones, pudiendo realizar una o un conjunto de las siguientes tareas: Inventario hardware. Monitoreado de disponibilidad de servidores y mediciones. Inventario e instalaci\u00f3n de software. Gesti\u00f3n de antivirus y anti-malware. Monitoreado de las actividades de los usuarios. Monitoreado de la capacidad de los sistemas. Gesti\u00f3n de seguridad. Gesti\u00f3n de almacenamiento. Monitoreado de la utilizaci\u00f3n y capacidades de la red. Estas tareas podemos clasificarlas de acuerdo a FCAPS , un modelo y marco de trabajo de red de la gesti\u00f3n de telecomunicaciones de ISO para la gesti\u00f3n de redes. FCAPS es un acr\u00f3nimo de Fault, Configuration, Accounting, Performance, Security (Falla, Configuraci\u00f3n, Contabilidad, Desempe\u00f1o, Seguridad), que son las categor\u00edas en las cuales el modelo ISO define las tareas de gesti\u00f3n de redes. Fault (Fallas): Es un evento que tiene un significado negativo. Su objetivo es reconocer, aislar , corregir y registrar fallos. Puede utilizar an\u00e1lisis de tendencias para predecir errores. Cuando se detecta un fallo o evento, se env\u00eda una notificaci\u00f3n. Configuration (Configuraci\u00f3n): En el proceso de gesti\u00f3n de la configuraci\u00f3n, las operaciones diarias son monitoreadas y controladas. Los objetivos de la gesti\u00f3n de la configuraci\u00f3n son: Recolectar informaci\u00f3n. Modificar la configuraci\u00f3n. Generaci\u00f3n de reportes Gesti\u00f3n de cambios. Los cambios de Hardware y Software son controlados por este proceso: Actualizaci\u00f3n, Instalaci\u00f3n y eliminaci\u00f3n de programas. Actualizaci\u00f3n, Instalaci\u00f3n y eliminaci\u00f3n de equipamiento (impresoras, scaners, memoria, etc.) Este proceso debe tener en cuenta: Permitir acceso r\u00e1pido a la informaci\u00f3n de la configuraci\u00f3n. Facilitar la configuraci\u00f3n remota de los dispositivos. Proporcionar un inventario actualizado de Software y Hardware. Simplificaci\u00f3n de la configuraci\u00f3n de dispositivos. El seguimiento de cambios a la configuraci\u00f3n. Accounting (Contabilidad): Su objetivo es reunir las estad\u00edsticas de los usuarios. Performance (Desempe\u00f1o). Recolentando y analizando los datos de rendimiento, el estado general de los sistemas pueden ser monitorizado. Las tendencias pueden avisar de fallos de capacidad o de cuestiones relacionadas con la fiabilidad de los sistemas, antes de que en estos ocurran. Umbrales de rendimiento pueden ser establecidos para lanzar alarmas que ser\u00edan controladas por la gesti\u00f3n de fallos habitual. Las alarmas se pueden clasificar atendiendo al grado de severidad. Security (Seguridad). Se encarga de controlar el acceso a recursos de red. La seguridad de los datos puede ser conseguida con la autenticaci\u00f3n, cifrado y permisos, principalmente. nota Migasfreee atendiendo a FCAPS, tiene capacidades de Faults, Configuration y Accounting. Un ejemplo de funcionamiento t\u00edpico de un Gestor de Sistemas que incorpore tareas de Configuration usar\u00eda un lenguaje que especificar\u00eda a qu\u00e9 estado se quiere llevar a los equipos, no c\u00f3mo llegar a ese estado. En nuestro caso, ser\u00eda algo parecido a esto: aseg\u00farate de que el paquete ntp-client est\u00e1 desinstalado, aseg\u00farate de que el paquete quehoraes-client est\u00e1 instalado, aseg\u00farate de que el fichero de configuraci\u00f3n de quehoraes-client es el mismo que el que est\u00e1 en el servidor. Peri\u00f3dicamente, los clientes se conectar\u00edan al servidor para obtener este c\u00f3digo que ser\u00e1 ejecutado mediante el int\u00e9rprete propio del Gestor de Sistemas instalado en el cliente. Este sistema permite automatizar aquellas tareas que realizan a menudo los administradores de sistemas, y aunque algunos Gestores de Sistemas se las ingenian para llevar un control de versiones, mantienen una base de datos independiente a la de los backends de los gestores de paquetes, dejando en entredicho todo lo relativo a la integridad de los sistemas. Empaquetando la personalizaci\u00f3n En AZLinux usamos otro m\u00e9todo: empaquetamos siempre la personalizaci\u00f3n. Para el caso del cliente \u201cQueHoraEs\u201d, crear\u00edamos el paquete azl-quehoraes-client 1 con la siguiente informaci\u00f3n: Dependencias: quehoraes-client Obsoletos: ntp-client En el script de postinstalaci\u00f3n escribir\u00edamos el siguiente c\u00f3digo: En el fichero de configuraci\u00f3n del cliente QueHoraes, modificar el valor de la entrada \u201cserver=\u201d por la IP del servidor QueHoraEs \u00a1Listo! Con esto queda garantizada la integridad frente al cambio de la personalizaci\u00f3n, aprovech\u00e1ndonos de la integridad que nos proporciona el sistema de paqueter\u00eda de nuestra distribuci\u00f3n GNU/Linux. Una vez empaquetada nuestra personalizaci\u00f3n, se hace relativamente sencillo realizar cualquier cambio posterior en ella. Pero crear un paquete desde cero para personalizar una distribuci\u00f3n GNU/Linux no es tan f\u00e1cil, no tanto por la creaci\u00f3n del paquete en s\u00ed, sino porque la personalizaci\u00f3n requiere de los conocimientos suficientes sobre el sistema GNU/Linux y sobre la propia aplicaci\u00f3n que se personaliza. nota Empaquetar la personalizaci\u00f3n nos asegura la integridad de los sistemas frente a sus cambios. Date cuenta que no es necesario ning\u00fan Gestor de Sistemas para instalar dicha personalizaci\u00f3n. S\u00f3lo necesitas el Gestor de Paquetes, y \u00e9ste siempre lo tienes disponible en cualquier distribuci\u00f3n GNU/Linux. Niveles de personalizaci\u00f3n Las aplicaciones suelen incorporar dos niveles de personalizaci\u00f3n: La del usuario. La del sistema (para todos los usuarios del sistema). La personalizaci\u00f3n del usuario es prioritaria a la del sistema, siempre y cuando esta \u00faltima no sea obligatoria. Es conveniente conocer si la aplicaci\u00f3n que vas a configurar incorpora la personalizaci\u00f3n a nivel de sistema, ya que \u00e9sta es la que se tendr\u00e1 que configurar. En los casos en que las aplicaciones s\u00f3lo tengan la configuraci\u00f3n a nivel de usuario, o en los casos en los que se requiera, tendr\u00e1s que recorrer todos los usuarios para aplicar la personalizaci\u00f3n a cada uno de ellos. La liberaci\u00f3n Es el segundo problema importante con el que vas a tener que lidiar. Por un lado, debes independizarte de los repositorios p\u00fablicos de tu distribuci\u00f3n GNU/Linux, por el simple motivo de que no puedes permitir que el control de los cambios que se instalar\u00e1n en tus m\u00e1quinas, lo tenga tu distribuci\u00f3n GNU/Linux en vez de tu organizaci\u00f3n. \u00bfImaginas que habr\u00eda pasado en AZLinux cuando OpenSuSE sustituy\u00f3 OpenOffice por LibreOffice? Cuando los usuarios hubieran encendido las m\u00e1quinas a las 8:00 de la ma\u00f1ana, se iniciar\u00eda la actualizaci\u00f3n a LibreOffice autom\u00e1ticamente pudi\u00e9ndose producir muchas incidencias. \u00bfFuncionar\u00eda todo? \u00bfNo es mejor probar LibreOffice en tu organizaci\u00f3n antes de que se instale en todos tus equipos? Tener la posibilidad de deshacer un cambio que se haya determinado como no deseado es importante. Tienes que decidir por ti mismo el software que deben tener tus usuarios y, por tanto, debes tener los gestores de paquetes configurados contra tus propios repositorios de paquetes y gestionarlos de alguna manera. Adem\u00e1s, es conveniente que puedas planificar a qui\u00e9n y cu\u00e1ndo se deben liberar dichos cambios. Imagina nuevamente el ejemplo de la sustituci\u00f3n de OpenOffice por LibreOffice. Estar\u00edamos hablando de una actualizaci\u00f3n de cerca de 500 MB por equipo que, multiplicado por todos los equipos de una organizaci\u00f3n, podr\u00eda resultar en mucho tr\u00e1fico de red. Una ventaja de planificar la liberaci\u00f3n es que permite distribuir poco a poco los cambios, de tal manera que, si hay errores, afectar\u00e1 inicialmente a muy pocos equipos, permitiendo actuar de manera m\u00e1s relajada para corregir cualquier incidencia. Por todo esto, y como los repositorios est\u00e1ndar de las distribuciones no tienen ning\u00fan mecanismo de planificaci\u00f3n de la liberaci\u00f3n, es por lo que decidimos desarrollar migasfree, extendiendo el concepto de repositorio de paquetes al concepto de despliegue: repositorio de paquetes din\u00e1mico y planificable. Despliegue Migasfree Un despliegue de migasfree es, simplemente, un repositorio est\u00e1ndar m\u00e1s la capacidad de poder especificar, de forma centralizada, cu\u00e1ndo y qui\u00e9n accede a ese repositorio. Veamos como act\u00faa migasfree en lo relativo a los repositorios: Los cambios que se quieren liberar son empaquetados y subidos a un servidor migasfree. Se crea un despliegue con los paquetes subidos y se establece a qui\u00e9n (atributos de usuario + equipo) y en qu\u00e9 momento se deben aplicar dichos cambios. El servidor migasfree crea un repositorio f\u00edsico (id\u00e9ntico al de cualquier distribuci\u00f3n GNU/Linux) con dichos paquetes, utilizando las herramientas est\u00e1ndar de creaci\u00f3n de repositorios ( createrepo para paqueter\u00eda RPM o dpkg-scanpackages para paqueter\u00eda Debian). Cuando un cliente migasfree se conecta al servidor env\u00eda sus atributos al servidor. El servidor consulta los despliegues para determinar, en funci\u00f3n de esos atributos enviados, la lista de los repositorios f\u00edsicos que tiene el cliente a su disposici\u00f3n y se los env\u00eda al cliente. El cliente migasfree configura la lista de los repositorios f\u00edsicos recibidos desde el servidor en el Gestor de Paquetes. A continuaci\u00f3n, el cliente migasfree da instrucciones al Gestor de Paquetes para que se produzca la eliminaci\u00f3n, instalaci\u00f3n y actualizaci\u00f3n de los paquetes desde los repositorios f\u00edsicos. La GCS en tu organizaci\u00f3n En el cap\u00edtulo anterior, hemos visto el proceso de la GCS en los distintos proyectos de software libre y tambi\u00e9n en las distribuciones GNU/Linux. Pues bien, en una organizaci\u00f3n tambi\u00e9n debe realizarse el proceso de la GCS. Proceso GCS en tu organizaci\u00f3n con migasfree Un usuario hace una petici\u00f3n de cambio. Un desarrollador programa el cambio de la configuraci\u00f3n software dentro de un paquete y lo sube a un servidor migasfree. La liberaci\u00f3n es realizada por el servidor migasfree a los ordenadores requeridos. En AZLinux realizamos nuestra propia GCS y vemos como, de nuevo, se repiten las mismas actividades: petici\u00f3n de cambio, cambio y liberaci\u00f3n. Usamos dos tipos de peticiones de cambio: Peticiones de cambio Actualizaci\u00f3n de aplicaciones . Si por ejemplo recibimos una petici\u00f3n para actualizar Mozilla Firefox, descargamos desde los repositorios de la distribuci\u00f3n la versi\u00f3n deseada. La probamos en laboratorio registrando cualquier informaci\u00f3n relevante en la petici\u00f3n de cambio. Finalmente, si todo es correcto, se liberan los paquetes a trav\u00e9s de un despliegue migasfree planificando su distribuci\u00f3n (ver A en el diagrama 'Peticiones de cambio'). Personalizaci\u00f3n de aplicaciones . Se produce por ejemplo cuando llega una petici\u00f3n de cambio para a\u00f1adir un motor de b\u00fasqueda de sin\u00f3nimos a Mozilla Firefox. Introducimos entonces en un paquete propio de AZLinux (azl-firefox) el c\u00f3digo que instala dicho motor de b\u00fasqueda y liberamos dicho paquete en un despliegue de migasfree planificando su distribuci\u00f3n (ver B en el diagrama 'Peticiones de cambio'). Las herramientas que usamos actualmente en cada actividad son: En la petici\u00f3n de cambio: Gestor de proyectos: Redmine En el cambio: Editor de textos: Geany IDE: PyCharm Sistema de control de versiones: GitLab Gestor de proyectos: Redmine En la liberaci\u00f3n: Gestor de sistemas: Migasfree Gestor de proyectos: Redmine nota Migasfree nos proporciona, de manera centralizada, conocer el estado, no s\u00f3lo del servidor migasfree, sino de cada uno de los equipos registrados en el servidor, converti\u00e9ndose en una herramienta ideal para hacer una auditor\u00eda tanto de software como de hardware. Beneficios Los principales beneficios que obtendr\u00e1 tu empresa, como resultado de aplicar una GCS, ser\u00edan: Reducci\u00f3n del coste de los servicios de desarrollo y mantenimiento. Optimizaci\u00f3n del uso de los recursos. Y para ti, como administrador: Dispondr\u00e1s de equipos m\u00e1s estables. Vas a pasar de ser un administrador que se echa las manos a la cabeza ante cualquier cambio a ser un administrador favorecedor del cambio, ya que dispones de las herramientas para hacer el seguimento y control de los cambios. Y, en \u00faltima instancia, vas a mejorar sustancialmente la resoluci\u00f3n de incidencias. En AZLinux empleamos como nombre de paquete el prefijo \"azl-\" m\u00e1s el nombre del paquete que queremos personalizar. \u21a9","title":"Admin"},{"location":"part1/admin/#administrando-escritorios","text":"En todo lo que nos rodea y en todo lo que nos mueve, debemos advertir que interviene en algo la casualidad. -- Anatole France. En el cap\u00edtulo anterior, hemos hablado de la GCS y de c\u00f3mo las distribuciones GNU/Linux utilizan el sistema de paqueter\u00eda para garantizar la integridad frente al cambio. Si tienes un equipo dom\u00e9stico, todos los cambios producidos y liberados por los distintos proyectos y que hayan sido empaquetados y liberados por tu distribuci\u00f3n GNU/Linux, ser\u00e1n instalados convenientemente con el simple hecho de dar la orden al gestor de paquetes para que actualice tu sistema. Ahora bien, en una organizaci\u00f3n donde se requiera administrar los escritorios esto no es suficiente, veamos el porqu\u00e9.","title":"Administrando escritorios"},{"location":"part1/admin/#la-personalizacion","text":"La primera dificultad importante a la que se va a enfrentar un administrador, va a ser la de la personalizaci\u00f3n. Imagina que tienes que migrar y administrar 1000 equipos a GNU/Linux y que tienes en tu red un servicio NTP, requiri\u00e9ndose que todos tus escritorios est\u00e9n con la hora sincronizada con este servicio. Vas a tener que personalizar el cliente NTP en todos tus escritorios. Una manera que se suele utilizar es instalar en un equipo una distribuci\u00f3n GNU/Linux desde un DVD, editar el fichero de configuraci\u00f3n del cliente NTP y configurar la IP (o el nombre DNS) del servidor donde se encuentra el servcio NTP. Despu\u00e9s, puedes crear una imagen del disco duro con un sistema de clonado como pueda ser Clonezilla y clonar uno a uno los equipos usando dicha imagen. Con este m\u00e9todo, la personalizaci\u00f3n inicial reside en dicha imagen, pero sigamos imaginando... Un d\u00eda, a mitad de migraci\u00f3n, recibes un correo y lees: \"Alberto: El servicio NTP dejar\u00e1 de dar servicio a partir del d\u00eda 10. En su lugar vamos a disponer de un nuevo servicio, llamado QueHoraEs, que es mucho mejor porque...\" En este momento, ya estar\u00e1s pensando en los 400 equipos que tienes migrados y te echar\u00e1s las manos a la cabeza porque es evidente que este sistema de personalizaci\u00f3n no es adecuado. nota La personalizaci\u00f3n inicial es muy sencilla de realizar, pero un cambio en la personalizaci\u00f3n puede darse en cualquier momento, y tienes que estar preparado para poder realizarlo.","title":"La personalizaci\u00f3n"},{"location":"part1/admin/#gestores-de-sistemas","text":"Afortunadamente, existen unas herramientas denominadas Gestores de Sistemas ( Systems Management Systems ), que pueden ayudarnos en la administraci\u00f3n de los escritorios. Algunos de estos Gestores de Sistemas se centran en la adquisici\u00f3n del estado de los equipos como Nagios , y otros permiten automatizar tareas mediante la ejecuci\u00f3n de c\u00f3digo en los equipos de manera centralizada como Zenworks , Landscape , chef , puppet , cfengine , ansible . Los Gestores de Sistemas est\u00e1n muy influidos por las iniciativas realizadas en los sistemas de gesti\u00f3n de redes de telecomunicaciones, pudiendo realizar una o un conjunto de las siguientes tareas: Inventario hardware. Monitoreado de disponibilidad de servidores y mediciones. Inventario e instalaci\u00f3n de software. Gesti\u00f3n de antivirus y anti-malware. Monitoreado de las actividades de los usuarios. Monitoreado de la capacidad de los sistemas. Gesti\u00f3n de seguridad. Gesti\u00f3n de almacenamiento. Monitoreado de la utilizaci\u00f3n y capacidades de la red. Estas tareas podemos clasificarlas de acuerdo a FCAPS , un modelo y marco de trabajo de red de la gesti\u00f3n de telecomunicaciones de ISO para la gesti\u00f3n de redes. FCAPS es un acr\u00f3nimo de Fault, Configuration, Accounting, Performance, Security (Falla, Configuraci\u00f3n, Contabilidad, Desempe\u00f1o, Seguridad), que son las categor\u00edas en las cuales el modelo ISO define las tareas de gesti\u00f3n de redes. Fault (Fallas): Es un evento que tiene un significado negativo. Su objetivo es reconocer, aislar , corregir y registrar fallos. Puede utilizar an\u00e1lisis de tendencias para predecir errores. Cuando se detecta un fallo o evento, se env\u00eda una notificaci\u00f3n. Configuration (Configuraci\u00f3n): En el proceso de gesti\u00f3n de la configuraci\u00f3n, las operaciones diarias son monitoreadas y controladas. Los objetivos de la gesti\u00f3n de la configuraci\u00f3n son: Recolectar informaci\u00f3n. Modificar la configuraci\u00f3n. Generaci\u00f3n de reportes Gesti\u00f3n de cambios. Los cambios de Hardware y Software son controlados por este proceso: Actualizaci\u00f3n, Instalaci\u00f3n y eliminaci\u00f3n de programas. Actualizaci\u00f3n, Instalaci\u00f3n y eliminaci\u00f3n de equipamiento (impresoras, scaners, memoria, etc.) Este proceso debe tener en cuenta: Permitir acceso r\u00e1pido a la informaci\u00f3n de la configuraci\u00f3n. Facilitar la configuraci\u00f3n remota de los dispositivos. Proporcionar un inventario actualizado de Software y Hardware. Simplificaci\u00f3n de la configuraci\u00f3n de dispositivos. El seguimiento de cambios a la configuraci\u00f3n. Accounting (Contabilidad): Su objetivo es reunir las estad\u00edsticas de los usuarios. Performance (Desempe\u00f1o). Recolentando y analizando los datos de rendimiento, el estado general de los sistemas pueden ser monitorizado. Las tendencias pueden avisar de fallos de capacidad o de cuestiones relacionadas con la fiabilidad de los sistemas, antes de que en estos ocurran. Umbrales de rendimiento pueden ser establecidos para lanzar alarmas que ser\u00edan controladas por la gesti\u00f3n de fallos habitual. Las alarmas se pueden clasificar atendiendo al grado de severidad. Security (Seguridad). Se encarga de controlar el acceso a recursos de red. La seguridad de los datos puede ser conseguida con la autenticaci\u00f3n, cifrado y permisos, principalmente. nota Migasfreee atendiendo a FCAPS, tiene capacidades de Faults, Configuration y Accounting. Un ejemplo de funcionamiento t\u00edpico de un Gestor de Sistemas que incorpore tareas de Configuration usar\u00eda un lenguaje que especificar\u00eda a qu\u00e9 estado se quiere llevar a los equipos, no c\u00f3mo llegar a ese estado. En nuestro caso, ser\u00eda algo parecido a esto: aseg\u00farate de que el paquete ntp-client est\u00e1 desinstalado, aseg\u00farate de que el paquete quehoraes-client est\u00e1 instalado, aseg\u00farate de que el fichero de configuraci\u00f3n de quehoraes-client es el mismo que el que est\u00e1 en el servidor. Peri\u00f3dicamente, los clientes se conectar\u00edan al servidor para obtener este c\u00f3digo que ser\u00e1 ejecutado mediante el int\u00e9rprete propio del Gestor de Sistemas instalado en el cliente. Este sistema permite automatizar aquellas tareas que realizan a menudo los administradores de sistemas, y aunque algunos Gestores de Sistemas se las ingenian para llevar un control de versiones, mantienen una base de datos independiente a la de los backends de los gestores de paquetes, dejando en entredicho todo lo relativo a la integridad de los sistemas.","title":"Gestores de Sistemas"},{"location":"part1/admin/#empaquetando-la-personalizacion","text":"En AZLinux usamos otro m\u00e9todo: empaquetamos siempre la personalizaci\u00f3n. Para el caso del cliente \u201cQueHoraEs\u201d, crear\u00edamos el paquete azl-quehoraes-client 1 con la siguiente informaci\u00f3n: Dependencias: quehoraes-client Obsoletos: ntp-client En el script de postinstalaci\u00f3n escribir\u00edamos el siguiente c\u00f3digo: En el fichero de configuraci\u00f3n del cliente QueHoraes, modificar el valor de la entrada \u201cserver=\u201d por la IP del servidor QueHoraEs \u00a1Listo! Con esto queda garantizada la integridad frente al cambio de la personalizaci\u00f3n, aprovech\u00e1ndonos de la integridad que nos proporciona el sistema de paqueter\u00eda de nuestra distribuci\u00f3n GNU/Linux. Una vez empaquetada nuestra personalizaci\u00f3n, se hace relativamente sencillo realizar cualquier cambio posterior en ella. Pero crear un paquete desde cero para personalizar una distribuci\u00f3n GNU/Linux no es tan f\u00e1cil, no tanto por la creaci\u00f3n del paquete en s\u00ed, sino porque la personalizaci\u00f3n requiere de los conocimientos suficientes sobre el sistema GNU/Linux y sobre la propia aplicaci\u00f3n que se personaliza. nota Empaquetar la personalizaci\u00f3n nos asegura la integridad de los sistemas frente a sus cambios. Date cuenta que no es necesario ning\u00fan Gestor de Sistemas para instalar dicha personalizaci\u00f3n. S\u00f3lo necesitas el Gestor de Paquetes, y \u00e9ste siempre lo tienes disponible en cualquier distribuci\u00f3n GNU/Linux.","title":"Empaquetando la personalizaci\u00f3n"},{"location":"part1/admin/#niveles-de-personalizacion","text":"Las aplicaciones suelen incorporar dos niveles de personalizaci\u00f3n: La del usuario. La del sistema (para todos los usuarios del sistema). La personalizaci\u00f3n del usuario es prioritaria a la del sistema, siempre y cuando esta \u00faltima no sea obligatoria. Es conveniente conocer si la aplicaci\u00f3n que vas a configurar incorpora la personalizaci\u00f3n a nivel de sistema, ya que \u00e9sta es la que se tendr\u00e1 que configurar. En los casos en que las aplicaciones s\u00f3lo tengan la configuraci\u00f3n a nivel de usuario, o en los casos en los que se requiera, tendr\u00e1s que recorrer todos los usuarios para aplicar la personalizaci\u00f3n a cada uno de ellos.","title":"Niveles de personalizaci\u00f3n"},{"location":"part1/admin/#la-liberacion","text":"Es el segundo problema importante con el que vas a tener que lidiar. Por un lado, debes independizarte de los repositorios p\u00fablicos de tu distribuci\u00f3n GNU/Linux, por el simple motivo de que no puedes permitir que el control de los cambios que se instalar\u00e1n en tus m\u00e1quinas, lo tenga tu distribuci\u00f3n GNU/Linux en vez de tu organizaci\u00f3n. \u00bfImaginas que habr\u00eda pasado en AZLinux cuando OpenSuSE sustituy\u00f3 OpenOffice por LibreOffice? Cuando los usuarios hubieran encendido las m\u00e1quinas a las 8:00 de la ma\u00f1ana, se iniciar\u00eda la actualizaci\u00f3n a LibreOffice autom\u00e1ticamente pudi\u00e9ndose producir muchas incidencias. \u00bfFuncionar\u00eda todo? \u00bfNo es mejor probar LibreOffice en tu organizaci\u00f3n antes de que se instale en todos tus equipos? Tener la posibilidad de deshacer un cambio que se haya determinado como no deseado es importante. Tienes que decidir por ti mismo el software que deben tener tus usuarios y, por tanto, debes tener los gestores de paquetes configurados contra tus propios repositorios de paquetes y gestionarlos de alguna manera. Adem\u00e1s, es conveniente que puedas planificar a qui\u00e9n y cu\u00e1ndo se deben liberar dichos cambios. Imagina nuevamente el ejemplo de la sustituci\u00f3n de OpenOffice por LibreOffice. Estar\u00edamos hablando de una actualizaci\u00f3n de cerca de 500 MB por equipo que, multiplicado por todos los equipos de una organizaci\u00f3n, podr\u00eda resultar en mucho tr\u00e1fico de red. Una ventaja de planificar la liberaci\u00f3n es que permite distribuir poco a poco los cambios, de tal manera que, si hay errores, afectar\u00e1 inicialmente a muy pocos equipos, permitiendo actuar de manera m\u00e1s relajada para corregir cualquier incidencia. Por todo esto, y como los repositorios est\u00e1ndar de las distribuciones no tienen ning\u00fan mecanismo de planificaci\u00f3n de la liberaci\u00f3n, es por lo que decidimos desarrollar migasfree, extendiendo el concepto de repositorio de paquetes al concepto de despliegue: repositorio de paquetes din\u00e1mico y planificable.","title":"La liberaci\u00f3n"},{"location":"part1/admin/#despliegue-migasfree","text":"Un despliegue de migasfree es, simplemente, un repositorio est\u00e1ndar m\u00e1s la capacidad de poder especificar, de forma centralizada, cu\u00e1ndo y qui\u00e9n accede a ese repositorio. Veamos como act\u00faa migasfree en lo relativo a los repositorios: Los cambios que se quieren liberar son empaquetados y subidos a un servidor migasfree. Se crea un despliegue con los paquetes subidos y se establece a qui\u00e9n (atributos de usuario + equipo) y en qu\u00e9 momento se deben aplicar dichos cambios. El servidor migasfree crea un repositorio f\u00edsico (id\u00e9ntico al de cualquier distribuci\u00f3n GNU/Linux) con dichos paquetes, utilizando las herramientas est\u00e1ndar de creaci\u00f3n de repositorios ( createrepo para paqueter\u00eda RPM o dpkg-scanpackages para paqueter\u00eda Debian). Cuando un cliente migasfree se conecta al servidor env\u00eda sus atributos al servidor. El servidor consulta los despliegues para determinar, en funci\u00f3n de esos atributos enviados, la lista de los repositorios f\u00edsicos que tiene el cliente a su disposici\u00f3n y se los env\u00eda al cliente. El cliente migasfree configura la lista de los repositorios f\u00edsicos recibidos desde el servidor en el Gestor de Paquetes. A continuaci\u00f3n, el cliente migasfree da instrucciones al Gestor de Paquetes para que se produzca la eliminaci\u00f3n, instalaci\u00f3n y actualizaci\u00f3n de los paquetes desde los repositorios f\u00edsicos.","title":"Despliegue Migasfree"},{"location":"part1/admin/#la-gcs-en-tu-organizacion","text":"En el cap\u00edtulo anterior, hemos visto el proceso de la GCS en los distintos proyectos de software libre y tambi\u00e9n en las distribuciones GNU/Linux. Pues bien, en una organizaci\u00f3n tambi\u00e9n debe realizarse el proceso de la GCS. Proceso GCS en tu organizaci\u00f3n con migasfree Un usuario hace una petici\u00f3n de cambio. Un desarrollador programa el cambio de la configuraci\u00f3n software dentro de un paquete y lo sube a un servidor migasfree. La liberaci\u00f3n es realizada por el servidor migasfree a los ordenadores requeridos. En AZLinux realizamos nuestra propia GCS y vemos como, de nuevo, se repiten las mismas actividades: petici\u00f3n de cambio, cambio y liberaci\u00f3n. Usamos dos tipos de peticiones de cambio: Peticiones de cambio Actualizaci\u00f3n de aplicaciones . Si por ejemplo recibimos una petici\u00f3n para actualizar Mozilla Firefox, descargamos desde los repositorios de la distribuci\u00f3n la versi\u00f3n deseada. La probamos en laboratorio registrando cualquier informaci\u00f3n relevante en la petici\u00f3n de cambio. Finalmente, si todo es correcto, se liberan los paquetes a trav\u00e9s de un despliegue migasfree planificando su distribuci\u00f3n (ver A en el diagrama 'Peticiones de cambio'). Personalizaci\u00f3n de aplicaciones . Se produce por ejemplo cuando llega una petici\u00f3n de cambio para a\u00f1adir un motor de b\u00fasqueda de sin\u00f3nimos a Mozilla Firefox. Introducimos entonces en un paquete propio de AZLinux (azl-firefox) el c\u00f3digo que instala dicho motor de b\u00fasqueda y liberamos dicho paquete en un despliegue de migasfree planificando su distribuci\u00f3n (ver B en el diagrama 'Peticiones de cambio'). Las herramientas que usamos actualmente en cada actividad son: En la petici\u00f3n de cambio: Gestor de proyectos: Redmine En el cambio: Editor de textos: Geany IDE: PyCharm Sistema de control de versiones: GitLab Gestor de proyectos: Redmine En la liberaci\u00f3n: Gestor de sistemas: Migasfree Gestor de proyectos: Redmine nota Migasfree nos proporciona, de manera centralizada, conocer el estado, no s\u00f3lo del servidor migasfree, sino de cada uno de los equipos registrados en el servidor, converti\u00e9ndose en una herramienta ideal para hacer una auditor\u00eda tanto de software como de hardware.","title":"La GCS en tu organizaci\u00f3n"},{"location":"part1/admin/#beneficios","text":"Los principales beneficios que obtendr\u00e1 tu empresa, como resultado de aplicar una GCS, ser\u00edan: Reducci\u00f3n del coste de los servicios de desarrollo y mantenimiento. Optimizaci\u00f3n del uso de los recursos. Y para ti, como administrador: Dispondr\u00e1s de equipos m\u00e1s estables. Vas a pasar de ser un administrador que se echa las manos a la cabeza ante cualquier cambio a ser un administrador favorecedor del cambio, ya que dispones de las herramientas para hacer el seguimento y control de los cambios. Y, en \u00faltima instancia, vas a mejorar sustancialmente la resoluci\u00f3n de incidencias. En AZLinux empleamos como nombre de paquete el prefijo \"azl-\" m\u00e1s el nombre del paquete que queremos personalizar. \u21a9","title":"Beneficios"},{"location":"part1/caracteristicas/","text":"Caracter\u00edsticas de migasfree Las cosas no se dicen, se hacen, porque al hacerlas se dicen solas. -- Woody Allen. El nacimiento de migasfree En el a\u00f1o 2005, todos grupos pol\u00edticos del Ayuntamiento de Zaragoza manifestaron por unanimidad, en pleno de gobierno municipal, apoyar las pol\u00edticas de uso de Software Libre y, en concreto, el fomento de los programas de SL en el entorno de escritorio del empleado municipal. La Direcci\u00f3n General de Ciencia y Tecnolog\u00eda asume, inicia y potencia este importante reto. 1 Este proyecto se planific\u00f3 en tres etapas: Primera: Migrar a aplicaciones que presentaban un impacto bajo sobre usuarios y t\u00e9cnicos en el Sistema Operativo actual (por aquel entonces, Microsoft Windows XP). Segunda: Migrar la plataforma ofim\u00e1tica Microsoft Office 97 por la suite libre OpenOffice. Tercera: Sustituir el SO Windows XP por un sistema operativo basado en Linux. Esta etapa se inici\u00f3 en 2008 y todav\u00eda sigue abierta. Para iniciar la tercera etapa, se tuvieron que realizar los primeros prototipos de lo que llegar\u00eda a ser la primera versi\u00f3n de AZLinux. En estos prototipos, la personalizaci\u00f3n se realizaba manualmente, en un equipo cuya imagen del disco duro nos serv\u00eda para clonarla en otros equipos y hacer las pertinentes pruebas. En aquel tiempo, aprendimos a empaquetar y empezamos a introducir nuestra personalizaci\u00f3n en nuestros propios paquetes. La ventaja frente a la personalizaci\u00f3n manual era muy significativa. Con los primeras migraciones reales, nos surgi\u00f3 la necesidad de actualizar nuestros paquetes y, despu\u00e9s de probar sin \u00e9xito Zenworks for Linux , decidimos crear nuestros propios repositorios de paquetes. Quisimos emular lo que ya estabamos haciendo con los escritorios XP, esto es, distribuir software bas\u00e1ndonos en el contexto al que pertenec\u00eda un usuario en nuestro LDAP. Con un poco de Bash scripting , en Mayo de 2009, implementamos lo que ser\u00edan unos repositorios din\u00e1micos que se configuraban en el cliente en funci\u00f3n del contexto. Esto fue, sin duda, una gran idea, pero la gesti\u00f3n de estos repositorios din\u00e1micos era manual y muy propensa a errores. La gesti\u00f3n de estos repositorios din\u00e1micos recay\u00f3 en m\u00ed, por lo que decid\u00ed simplificarla inmediatamente y crear el primer prototipo de migasfree . Dos semanas de programaci\u00f3n, en horas no laborales, fueron suficientes para presentar a mis compa\u00f1eros de trabajo un prototipo, que fue puesto en producci\u00f3n en Junio de 2009. nota Una de las ventajas de trabajar con software libre es la facilidad con la que puedes crear proyectos ya que puedes mezclar, como si de piezas de puzzle fueran, diferentes componentes sin preocuparte en exceso del tema de las licencias. Un ejemplo de esto ha sido la incorporaci\u00f3n de la funcionalidad de captura del hardware en los equipos. Utilic\u00e9 el comando lshw y unas pocas l\u00edneas de c\u00f3digo para adaptarlo a la base de datos de migasfree. Versiones El primer prototipo s\u00f3lo trabajaba con paqueter\u00eda rpm y gestor de paquetes yum , y el c\u00f3digo bash que se ejecutaba en el cliente se generaba en el servidor. Despu\u00e9s de usar migasfree un tiempo en producci\u00f3n, vimos que podr\u00eda ser un buen sistema para otras organizaciones, y mis compa\u00f1eros me dieron el impulso necesario para publicar el c\u00f3digo. As\u00ed, durante el verano de 2009, reorganice los men\u00fas, limpi\u00e9 un poco el c\u00f3digo, e hice que migasfree pudiera trabajar con distintas versiones de SO y de sistemas de paqueter\u00eda. Fue publicado en github en abril de 2010 y bautizado como \"migasfree with fried eggs\", porque mis compa\u00f1eros dec\u00edan que el logotipo se parec\u00eda a un huevo frito. \u00a1Qu\u00e9 sabr\u00e1n ellos de Arte! En Noviembre de 2011, Jose Antonio Chavarr\u00eda, desarrollador de AZLinux, reescribe y publica el cliente migasfree . Realiz\u00f3 tambi\u00e9n grandes cambios en la estructura del servidor. Tuvimos que definir la API con la que el cliente y el servidor deb\u00edan comunicarse. Usamos claves asim\u00e9tricas para dotar de seguridad al sistema. Esta nueva versi\u00f3n fue denominada \"migasfree no trans\" supongo que por incorporar un c\u00f3digo m\u00e1s \"limpio\", por decirlo de alguna manera. Poco a poco, fuimos dotando al sistema de nuevas funcionalidades, y para principios de 2013, Jose Antonio Chavarr\u00eda cambi\u00f3 la navegaci\u00f3n y aspecto del servidor. Esta nueva versi\u00f3n fue denominada \"migasfree with chocolate\". En febrero de 2014, liberamos la versi\u00f3n 4 del servidor ( migasfree grape edition ). Esta versi\u00f3n hace uso de bootstrap con el fin de dotar a la aplicaci\u00f3n de un dise\u00f1o web adaptable a distintos dispositivos. Adem\u00e1s, incorpora distintas mejoras de todo tipo. Actualmente es la vers\u00ed\u00f3n que utilizamos en AZLinux. En 2015 nos sumamos a una ola disruptora: docker . Esto nos ha liberado de tener que pelearnos con las dependencias de los componentes que utilizamos en el servidor y de tener que publicar los paquetes que generabamos para distintas distribuciones GNU/Linux (utilizamos versiones de componentes que a\u00fan no han sido liberados y esto nos creaba aut\u00e9nticos quebraderos de cabeza). Con docker hemos conseguido colocar el servidor y sus dependencias en un contenedor virtual (un debian) que puede ejecutarse en cualquier servidor GNU/Linux. Esto nos ha proporcionado una flexibilidad y portabilidad para ejecutar el servidor de una forma muy simple tanto en un equipo f\u00edsico como en la nube. Caracter\u00edsticas Migasfree es simple, y hacemos esfuerzos por mantenerlo as\u00ed. Tendemos a lo que denominamos gesti\u00f3n cero, es decir, procuramos que la gesti\u00f3n de a\u00f1adir nuevas entradas en migasfree no requiera ninguna tarea administrativa. Est\u00e1 basado en la arquitectura cliente/servidor. Es seguro. Las comunicaciones entre cliente y servidor est\u00e1n firmadas con claves asim\u00e9tricas. Es adaptable. Puedes programar tus propias f\u00f3rmulas para obtener los atributos de los ordenadores y usuarios seg\u00fan tus intereses. Es Software Libre licenciado bajo la GNU Public License . Almacena tanto el inventario software y hardware de los equipos, permitiendo hacer consultas sobre ellos. Almacena tambi\u00e9n informaci\u00f3n de los equipos tales como sus atributos, sincronizaciones, migraciones que se han realizado, etc. Consultas. Puedes programar consultas contra la base de datos de migasfree. Gesti\u00f3n de errores. Los errores que se producen en los equipos son enviados al servidor y almacenados, permitiendo hacer su seguimiento. Gesti\u00f3n de fallas. Puedes programar c\u00f3digo que ser\u00e1 ejecutado en los clientes con el fin de obtener informaci\u00f3n de los equipos. Alertas. Permite conocer en tiempo real el estado del sistema facilitando al administrador su trabajo. Estad\u00edsticas. Principales componentes empleados Lenguaje de programaci\u00f3n Python . Django un framework de desarrollo web. Servidor web Nginx . Chaussette como servidor WSGI Base de datos Posgresql . Informaci\u00f3n Hardware: Lshw . Eduardo Romero Moreno, Migraci\u00f3n Escritorio Software Libre , 2011 \u21a9","title":"Caracteristicas"},{"location":"part1/caracteristicas/#caracteristicas-de-migasfree","text":"Las cosas no se dicen, se hacen, porque al hacerlas se dicen solas. -- Woody Allen.","title":"Caracter\u00edsticas de migasfree"},{"location":"part1/caracteristicas/#el-nacimiento-de-migasfree","text":"En el a\u00f1o 2005, todos grupos pol\u00edticos del Ayuntamiento de Zaragoza manifestaron por unanimidad, en pleno de gobierno municipal, apoyar las pol\u00edticas de uso de Software Libre y, en concreto, el fomento de los programas de SL en el entorno de escritorio del empleado municipal. La Direcci\u00f3n General de Ciencia y Tecnolog\u00eda asume, inicia y potencia este importante reto. 1 Este proyecto se planific\u00f3 en tres etapas: Primera: Migrar a aplicaciones que presentaban un impacto bajo sobre usuarios y t\u00e9cnicos en el Sistema Operativo actual (por aquel entonces, Microsoft Windows XP). Segunda: Migrar la plataforma ofim\u00e1tica Microsoft Office 97 por la suite libre OpenOffice. Tercera: Sustituir el SO Windows XP por un sistema operativo basado en Linux. Esta etapa se inici\u00f3 en 2008 y todav\u00eda sigue abierta. Para iniciar la tercera etapa, se tuvieron que realizar los primeros prototipos de lo que llegar\u00eda a ser la primera versi\u00f3n de AZLinux. En estos prototipos, la personalizaci\u00f3n se realizaba manualmente, en un equipo cuya imagen del disco duro nos serv\u00eda para clonarla en otros equipos y hacer las pertinentes pruebas. En aquel tiempo, aprendimos a empaquetar y empezamos a introducir nuestra personalizaci\u00f3n en nuestros propios paquetes. La ventaja frente a la personalizaci\u00f3n manual era muy significativa. Con los primeras migraciones reales, nos surgi\u00f3 la necesidad de actualizar nuestros paquetes y, despu\u00e9s de probar sin \u00e9xito Zenworks for Linux , decidimos crear nuestros propios repositorios de paquetes. Quisimos emular lo que ya estabamos haciendo con los escritorios XP, esto es, distribuir software bas\u00e1ndonos en el contexto al que pertenec\u00eda un usuario en nuestro LDAP. Con un poco de Bash scripting , en Mayo de 2009, implementamos lo que ser\u00edan unos repositorios din\u00e1micos que se configuraban en el cliente en funci\u00f3n del contexto. Esto fue, sin duda, una gran idea, pero la gesti\u00f3n de estos repositorios din\u00e1micos era manual y muy propensa a errores. La gesti\u00f3n de estos repositorios din\u00e1micos recay\u00f3 en m\u00ed, por lo que decid\u00ed simplificarla inmediatamente y crear el primer prototipo de migasfree . Dos semanas de programaci\u00f3n, en horas no laborales, fueron suficientes para presentar a mis compa\u00f1eros de trabajo un prototipo, que fue puesto en producci\u00f3n en Junio de 2009. nota Una de las ventajas de trabajar con software libre es la facilidad con la que puedes crear proyectos ya que puedes mezclar, como si de piezas de puzzle fueran, diferentes componentes sin preocuparte en exceso del tema de las licencias. Un ejemplo de esto ha sido la incorporaci\u00f3n de la funcionalidad de captura del hardware en los equipos. Utilic\u00e9 el comando lshw y unas pocas l\u00edneas de c\u00f3digo para adaptarlo a la base de datos de migasfree.","title":"El nacimiento de migasfree"},{"location":"part1/caracteristicas/#versiones","text":"El primer prototipo s\u00f3lo trabajaba con paqueter\u00eda rpm y gestor de paquetes yum , y el c\u00f3digo bash que se ejecutaba en el cliente se generaba en el servidor. Despu\u00e9s de usar migasfree un tiempo en producci\u00f3n, vimos que podr\u00eda ser un buen sistema para otras organizaciones, y mis compa\u00f1eros me dieron el impulso necesario para publicar el c\u00f3digo. As\u00ed, durante el verano de 2009, reorganice los men\u00fas, limpi\u00e9 un poco el c\u00f3digo, e hice que migasfree pudiera trabajar con distintas versiones de SO y de sistemas de paqueter\u00eda. Fue publicado en github en abril de 2010 y bautizado como \"migasfree with fried eggs\", porque mis compa\u00f1eros dec\u00edan que el logotipo se parec\u00eda a un huevo frito. \u00a1Qu\u00e9 sabr\u00e1n ellos de Arte! En Noviembre de 2011, Jose Antonio Chavarr\u00eda, desarrollador de AZLinux, reescribe y publica el cliente migasfree . Realiz\u00f3 tambi\u00e9n grandes cambios en la estructura del servidor. Tuvimos que definir la API con la que el cliente y el servidor deb\u00edan comunicarse. Usamos claves asim\u00e9tricas para dotar de seguridad al sistema. Esta nueva versi\u00f3n fue denominada \"migasfree no trans\" supongo que por incorporar un c\u00f3digo m\u00e1s \"limpio\", por decirlo de alguna manera. Poco a poco, fuimos dotando al sistema de nuevas funcionalidades, y para principios de 2013, Jose Antonio Chavarr\u00eda cambi\u00f3 la navegaci\u00f3n y aspecto del servidor. Esta nueva versi\u00f3n fue denominada \"migasfree with chocolate\". En febrero de 2014, liberamos la versi\u00f3n 4 del servidor ( migasfree grape edition ). Esta versi\u00f3n hace uso de bootstrap con el fin de dotar a la aplicaci\u00f3n de un dise\u00f1o web adaptable a distintos dispositivos. Adem\u00e1s, incorpora distintas mejoras de todo tipo. Actualmente es la vers\u00ed\u00f3n que utilizamos en AZLinux. En 2015 nos sumamos a una ola disruptora: docker . Esto nos ha liberado de tener que pelearnos con las dependencias de los componentes que utilizamos en el servidor y de tener que publicar los paquetes que generabamos para distintas distribuciones GNU/Linux (utilizamos versiones de componentes que a\u00fan no han sido liberados y esto nos creaba aut\u00e9nticos quebraderos de cabeza). Con docker hemos conseguido colocar el servidor y sus dependencias en un contenedor virtual (un debian) que puede ejecutarse en cualquier servidor GNU/Linux. Esto nos ha proporcionado una flexibilidad y portabilidad para ejecutar el servidor de una forma muy simple tanto en un equipo f\u00edsico como en la nube.","title":"Versiones"},{"location":"part1/caracteristicas/#caracteristicas","text":"Migasfree es simple, y hacemos esfuerzos por mantenerlo as\u00ed. Tendemos a lo que denominamos gesti\u00f3n cero, es decir, procuramos que la gesti\u00f3n de a\u00f1adir nuevas entradas en migasfree no requiera ninguna tarea administrativa. Est\u00e1 basado en la arquitectura cliente/servidor. Es seguro. Las comunicaciones entre cliente y servidor est\u00e1n firmadas con claves asim\u00e9tricas. Es adaptable. Puedes programar tus propias f\u00f3rmulas para obtener los atributos de los ordenadores y usuarios seg\u00fan tus intereses. Es Software Libre licenciado bajo la GNU Public License . Almacena tanto el inventario software y hardware de los equipos, permitiendo hacer consultas sobre ellos. Almacena tambi\u00e9n informaci\u00f3n de los equipos tales como sus atributos, sincronizaciones, migraciones que se han realizado, etc. Consultas. Puedes programar consultas contra la base de datos de migasfree. Gesti\u00f3n de errores. Los errores que se producen en los equipos son enviados al servidor y almacenados, permitiendo hacer su seguimiento. Gesti\u00f3n de fallas. Puedes programar c\u00f3digo que ser\u00e1 ejecutado en los clientes con el fin de obtener informaci\u00f3n de los equipos. Alertas. Permite conocer en tiempo real el estado del sistema facilitando al administrador su trabajo. Estad\u00edsticas.","title":"Caracter\u00edsticas"},{"location":"part1/caracteristicas/#principales-componentes-empleados","text":"Lenguaje de programaci\u00f3n Python . Django un framework de desarrollo web. Servidor web Nginx . Chaussette como servidor WSGI Base de datos Posgresql . Informaci\u00f3n Hardware: Lshw . Eduardo Romero Moreno, Migraci\u00f3n Escritorio Software Libre , 2011 \u21a9","title":"Principales componentes empleados"},{"location":"part1/gcs/","text":"Gesti\u00f3n de la Configuraci\u00f3n Software Nada es permanente a excepci\u00f3n del cambio. -- Her\u00e1clito de \u00c9feso. Estamos acostumbrados a actualizar peri\u00f3dicamente nuestras aplicaciones: los sistemas se hacen obsoletos r\u00e1pidamente, aparecen nuevas tecnolog\u00edas, hay errores que son resueltos, surgen nuevas necesidades. Sin importar en qu\u00e9 momento del ciclo de vida del sistema nos encontremos, el sistema cambiar\u00e1, y el deseo de cambiarlo persistir\u00e1 a lo largo de todo el ciclo de vida. 1 Por tanto, el cambio en el software es inevitable y es deseable que ocurra. Es inevitable porque los desarrolladores cometemos errores y es mediante una modificaci\u00f3n como los corregimos. A este tipo de cambios los llamamos correctivos . Por otro lado, el cambio es deseable ya que a menudo queremos incorporar nuevas funcionalidades al software o mejorar aquellas que ya exist\u00edan. Mediante los cambios evolutivos es como mejoramos el software. El cambio genera confusi\u00f3n e incertidumbre y se produce desde que concebimos, constru\u00edmos y tambi\u00e9n mientras mantenemos un proyecto software. El gran reto reside precisamente en gestionar de forma controlada dichos cambios usando alguna estrategia que los favorezca y facilite. De esto trata precisamente la Gesti\u00f3n de la Configuraci\u00f3n Software (GCS), un proceso de la Ingenier\u00eda del Software que identifica, hace seguimiento y controla cada uno de los cambios que se producen en los sistemas. Objetivo El objetivo de la GCS es conservar la integridad de los sistemas frente a los cambios. Un sistema ser\u00e1 \u00edntegro frente al cambio si: Mantiene correctamente las relaciones entre los distintos cambios a medida que se van produciendo (el t\u00edpico problema de dependencias entre elementos). Permite la auditor\u00eda de cambios (conocimiento del estado de un sistema al que se le han ido aplicando cambios sucesivamente). El proceso El proceso de la GCS es un conjunto de actividades que nos permitir\u00e1 garantizar dicha integridad, y que podemos resumir en: Petici\u00f3n de cambio. Cambio. Liberaci\u00f3n. Petici\u00f3n de cambio Cuando se nos reporta un error o una petici\u00f3n de mejora, lo primero que hacemos es identificar el Elemento de Configuraci\u00f3n Software (ECS) al que se refiere. Un ECS es cualquier objeto software sometido a la GCS. Puede ser un manual de usuario, una especificaci\u00f3n, un conjunto de datos para realizar tests, una aplicaci\u00f3n, una librer\u00eda, incluso las herramientas que se usan para realizar dichos cambios, etc. Una vez identificado el ECS se registra la petici\u00f3n de cambio. Las herramientas t\u00edpicas para registrar y hacer el seguimiento del cambio son los denominados gestores de proyectos (Redmine, Bugzilla, Tracker, etc.) Cada petici\u00f3n de cambio es analizada m\u00e1s tarde pudiendo ser aceptada o rechazada. Si es rechazada, se avisa al informador y se cierra la petici\u00f3n. Si es aceptada, se asigna la petici\u00f3n a alguien para que realice dicho cambio. Cambio El cambio es la actividad que modifica el ECS, generando una nueva versi\u00f3n del ECS. En esta actividad se utilizan un conjunto muy diverso de herramientas, desde procesadores y editores de texto, sistemas de control de versiones, entornos de desarrollo integrados (IDE), depuradores, compiladores... Liberaci\u00f3n La liberaci\u00f3n es la actividad de situar la nueva versi\u00f3n del ECS generada, en un repositorio o almac\u00e9n para que posteriormente los clientes del ECS puedan acceder a \u00e9l e instalarlo. Elemento de Configuraci\u00f3n Software Si observamos como los diferentes proyectos de Software Libre realizan la GCS, vemos que realizan las actividades mencionadas liberando finalmente el c\u00f3digo fuente del proyecto en Internet. Estos proyectos trabajan con distintos tipos de ECS (.png, .txt, .py, .c, .bin, etc.) usando los Sistemas de Control de Versiones , junto con las plataformas de desarrollo colaborativo como sourceforge.net, github.com, etc. Este c\u00f3digo fuente ser\u00e1 posteriormente compilado por los mantenedores de las distribuciones GNU/Linux (Fedora, Red Hat, Debian, Ubuntu, etc.), realizando su propia GCS. Pero a diferencia de los primeros, las Distribuciones GNU/Linux s\u00f3lo trabajan sobre un \u00fanico tipo de ECS: el paquete , donde introducir\u00e1n el programa ya compilado. Este simple hecho permite garantizar la integridad frente a los cambios de forma eficaz y sencilla, como veremos a continuaci\u00f3n. El paquete Un paquete es un contenedor que encapsula un conjunto de ECS liberados por un determinado proyecto, junto a su metainformaci\u00f3n. Contendr\u00e1, por tanto, el programa compilado para una determinada distribuci\u00f3n y arquitectura, m\u00e1s un amplio conjunto de informaci\u00f3n, como puede ser: El autor del programa. La direcci\u00f3n del repositorio del proyecto. La versi\u00f3n del ECS. La arquitectura. El nombre y direcci\u00f3n e-mail del empaquetador. La fecha de empaquetado. El nombre del equipo en que se produjo el empaquetado. Una descripci\u00f3n corta del contenido del paquete. Una descripci\u00f3n larga. Pero, adem\u00e1s, suelen incluir: Dependencias con otros paquetes. C\u00f3digo a ejecutar antes y despu\u00e9s de: Instalar. Actualizar. Eliminar el paquete. Una vez que un mantenedor de una Distribuci\u00f3n GNU/Linux ha creado un paquete, lo libera poni\u00e9ndolo en un repositorio p\u00fablico a disposici\u00f3n de los clientes. Puesta en producci\u00f3n Los encargados de aplicar los cambios son los programas denominados gestores de paquetes tales como yum , zypper o apt . Un gestor de paquetes es un programa que permite poner en producci\u00f3n los cambios que han sido liberados en los repositorios. La actualizaci\u00f3n de un equipo se realiza comparando las versiones de los paquetes instalados con los paquetes de los repositorios p\u00fablicos, detectando los que han aumentado su versi\u00f3n, resolviendo sus dependencias y finalmente, si no hay conflictos, obtienen desde los repositorios los paquetes necesarios. Una vez han descargado los paquetes, dan \u00f3rdenes a los backends ( rpm , dpkg , etc.), para que se produzca la desinstalaci\u00f3n de los paquetes antiguos y la instalaci\u00f3n de los nuevos. Los backends abren el paquete, y grosso modo: 1. Extraen los ficheros del programa copi\u00e1ndolos en el sistema, y ejecutan adem\u00e1s el c\u00f3digo programado para antes y despu\u00e9s de la actualizaci\u00f3n. 2. La metainformaci\u00f3n es extra\u00edda del paquete y se almacena en la base de datos del backend. Dec\u00eda Ian Murdock, fundador de Debian, que el gran aporte del software libre a la industria, ha sido precisamente la invenci\u00f3n del sistema de paqueter\u00eda (paquete, repositorio, gestor de paquetes). Y no es para menos, ya que este sistema nos proporciona los dos requisitos necesarios que garantizan la integridad frente a los cambios: El control de dependencias, mediante el gestor de paquetes. La auditor\u00eda, mediante las consultas a la base de datos del backend. nota Si est\u00e1s acostumbrado a instalar programas mediante el t\u00edpico \u201c./configure, make, install\u201d, tienes que ser consciente que est\u00e1s rompiendo la integridad frente a los cambios, ya que la base de datos del backend no es actualizada con este procedimiento. Todo lo que no sea instalar programas mediante el gestor de paquetes o el backend, rompe la integridad. A continuaci\u00f3n, se muestra una tabla con las operaciones m\u00e1s comunes que puedes emplear sobre algunos de los gestores de paquetes m\u00e1s conocidos: Operaciones Gestores apt yum zypper Actualizar listado de paquetes disponibles apt-get update yum check-update zypper refresh Actualizar sistema apt-get upgrade yum update zypper update Instalar paquete apt-get install <pkg> yum install <pkg> zypper install<pkg> Borrar paquete apt-get remove <pkg> yum erase <pkg> zypper remove <pkg> Buscar paquete apt-cache yum list zypper search Buscar repositorio de un paquete apt-cache madison <pkg> yum whatprovides <pkg> zypper whatprovides <pkg> Veamos ahora las operaciones m\u00e1s comunes que puedes emplear sobre los backends dpkg y rpm : Operaciones Backends dpkg rpm Instalar fichero de paquete dpkg -i <file.deb> rpm -ivh <file.rpm> Borrar paquete dpkg -r <pkg> rpm -e <pkg> Paquete que instala el fichero <file> dpkg -S <file> rpm -qf <file> Ficheros del paquete dpkg -L <pkg> rpm -ql <pkg> Descripci\u00f3n del paquete dpkg -s <pkg> rpm -qi <pkg> Paquetes instalados dpkg -l rpm -qa Primera ley de la Ingenier\u00eda de Sistemas, Software Configuration Management, Bersoff, Henderson & Siegel, Prentice-Hall, 1980 \u21a9","title":"Gcs"},{"location":"part1/gcs/#gestion-de-la-configuracion-software","text":"Nada es permanente a excepci\u00f3n del cambio. -- Her\u00e1clito de \u00c9feso. Estamos acostumbrados a actualizar peri\u00f3dicamente nuestras aplicaciones: los sistemas se hacen obsoletos r\u00e1pidamente, aparecen nuevas tecnolog\u00edas, hay errores que son resueltos, surgen nuevas necesidades. Sin importar en qu\u00e9 momento del ciclo de vida del sistema nos encontremos, el sistema cambiar\u00e1, y el deseo de cambiarlo persistir\u00e1 a lo largo de todo el ciclo de vida. 1 Por tanto, el cambio en el software es inevitable y es deseable que ocurra. Es inevitable porque los desarrolladores cometemos errores y es mediante una modificaci\u00f3n como los corregimos. A este tipo de cambios los llamamos correctivos . Por otro lado, el cambio es deseable ya que a menudo queremos incorporar nuevas funcionalidades al software o mejorar aquellas que ya exist\u00edan. Mediante los cambios evolutivos es como mejoramos el software. El cambio genera confusi\u00f3n e incertidumbre y se produce desde que concebimos, constru\u00edmos y tambi\u00e9n mientras mantenemos un proyecto software. El gran reto reside precisamente en gestionar de forma controlada dichos cambios usando alguna estrategia que los favorezca y facilite. De esto trata precisamente la Gesti\u00f3n de la Configuraci\u00f3n Software (GCS), un proceso de la Ingenier\u00eda del Software que identifica, hace seguimiento y controla cada uno de los cambios que se producen en los sistemas.","title":"Gesti\u00f3n de la Configuraci\u00f3n Software"},{"location":"part1/gcs/#objetivo","text":"El objetivo de la GCS es conservar la integridad de los sistemas frente a los cambios. Un sistema ser\u00e1 \u00edntegro frente al cambio si: Mantiene correctamente las relaciones entre los distintos cambios a medida que se van produciendo (el t\u00edpico problema de dependencias entre elementos). Permite la auditor\u00eda de cambios (conocimiento del estado de un sistema al que se le han ido aplicando cambios sucesivamente).","title":"Objetivo"},{"location":"part1/gcs/#el-proceso","text":"El proceso de la GCS es un conjunto de actividades que nos permitir\u00e1 garantizar dicha integridad, y que podemos resumir en: Petici\u00f3n de cambio. Cambio. Liberaci\u00f3n.","title":"El proceso"},{"location":"part1/gcs/#peticion-de-cambio","text":"Cuando se nos reporta un error o una petici\u00f3n de mejora, lo primero que hacemos es identificar el Elemento de Configuraci\u00f3n Software (ECS) al que se refiere. Un ECS es cualquier objeto software sometido a la GCS. Puede ser un manual de usuario, una especificaci\u00f3n, un conjunto de datos para realizar tests, una aplicaci\u00f3n, una librer\u00eda, incluso las herramientas que se usan para realizar dichos cambios, etc. Una vez identificado el ECS se registra la petici\u00f3n de cambio. Las herramientas t\u00edpicas para registrar y hacer el seguimiento del cambio son los denominados gestores de proyectos (Redmine, Bugzilla, Tracker, etc.) Cada petici\u00f3n de cambio es analizada m\u00e1s tarde pudiendo ser aceptada o rechazada. Si es rechazada, se avisa al informador y se cierra la petici\u00f3n. Si es aceptada, se asigna la petici\u00f3n a alguien para que realice dicho cambio.","title":"Petici\u00f3n de cambio"},{"location":"part1/gcs/#cambio","text":"El cambio es la actividad que modifica el ECS, generando una nueva versi\u00f3n del ECS. En esta actividad se utilizan un conjunto muy diverso de herramientas, desde procesadores y editores de texto, sistemas de control de versiones, entornos de desarrollo integrados (IDE), depuradores, compiladores...","title":"Cambio"},{"location":"part1/gcs/#liberacion","text":"La liberaci\u00f3n es la actividad de situar la nueva versi\u00f3n del ECS generada, en un repositorio o almac\u00e9n para que posteriormente los clientes del ECS puedan acceder a \u00e9l e instalarlo.","title":"Liberaci\u00f3n"},{"location":"part1/gcs/#elemento-de-configuracion-software","text":"Si observamos como los diferentes proyectos de Software Libre realizan la GCS, vemos que realizan las actividades mencionadas liberando finalmente el c\u00f3digo fuente del proyecto en Internet. Estos proyectos trabajan con distintos tipos de ECS (.png, .txt, .py, .c, .bin, etc.) usando los Sistemas de Control de Versiones , junto con las plataformas de desarrollo colaborativo como sourceforge.net, github.com, etc. Este c\u00f3digo fuente ser\u00e1 posteriormente compilado por los mantenedores de las distribuciones GNU/Linux (Fedora, Red Hat, Debian, Ubuntu, etc.), realizando su propia GCS. Pero a diferencia de los primeros, las Distribuciones GNU/Linux s\u00f3lo trabajan sobre un \u00fanico tipo de ECS: el paquete , donde introducir\u00e1n el programa ya compilado. Este simple hecho permite garantizar la integridad frente a los cambios de forma eficaz y sencilla, como veremos a continuaci\u00f3n.","title":"Elemento de Configuraci\u00f3n Software"},{"location":"part1/gcs/#el-paquete","text":"Un paquete es un contenedor que encapsula un conjunto de ECS liberados por un determinado proyecto, junto a su metainformaci\u00f3n. Contendr\u00e1, por tanto, el programa compilado para una determinada distribuci\u00f3n y arquitectura, m\u00e1s un amplio conjunto de informaci\u00f3n, como puede ser: El autor del programa. La direcci\u00f3n del repositorio del proyecto. La versi\u00f3n del ECS. La arquitectura. El nombre y direcci\u00f3n e-mail del empaquetador. La fecha de empaquetado. El nombre del equipo en que se produjo el empaquetado. Una descripci\u00f3n corta del contenido del paquete. Una descripci\u00f3n larga. Pero, adem\u00e1s, suelen incluir: Dependencias con otros paquetes. C\u00f3digo a ejecutar antes y despu\u00e9s de: Instalar. Actualizar. Eliminar el paquete. Una vez que un mantenedor de una Distribuci\u00f3n GNU/Linux ha creado un paquete, lo libera poni\u00e9ndolo en un repositorio p\u00fablico a disposici\u00f3n de los clientes.","title":"El paquete"},{"location":"part1/gcs/#puesta-en-produccion","text":"Los encargados de aplicar los cambios son los programas denominados gestores de paquetes tales como yum , zypper o apt . Un gestor de paquetes es un programa que permite poner en producci\u00f3n los cambios que han sido liberados en los repositorios. La actualizaci\u00f3n de un equipo se realiza comparando las versiones de los paquetes instalados con los paquetes de los repositorios p\u00fablicos, detectando los que han aumentado su versi\u00f3n, resolviendo sus dependencias y finalmente, si no hay conflictos, obtienen desde los repositorios los paquetes necesarios. Una vez han descargado los paquetes, dan \u00f3rdenes a los backends ( rpm , dpkg , etc.), para que se produzca la desinstalaci\u00f3n de los paquetes antiguos y la instalaci\u00f3n de los nuevos. Los backends abren el paquete, y grosso modo: 1. Extraen los ficheros del programa copi\u00e1ndolos en el sistema, y ejecutan adem\u00e1s el c\u00f3digo programado para antes y despu\u00e9s de la actualizaci\u00f3n. 2. La metainformaci\u00f3n es extra\u00edda del paquete y se almacena en la base de datos del backend. Dec\u00eda Ian Murdock, fundador de Debian, que el gran aporte del software libre a la industria, ha sido precisamente la invenci\u00f3n del sistema de paqueter\u00eda (paquete, repositorio, gestor de paquetes). Y no es para menos, ya que este sistema nos proporciona los dos requisitos necesarios que garantizan la integridad frente a los cambios: El control de dependencias, mediante el gestor de paquetes. La auditor\u00eda, mediante las consultas a la base de datos del backend. nota Si est\u00e1s acostumbrado a instalar programas mediante el t\u00edpico \u201c./configure, make, install\u201d, tienes que ser consciente que est\u00e1s rompiendo la integridad frente a los cambios, ya que la base de datos del backend no es actualizada con este procedimiento. Todo lo que no sea instalar programas mediante el gestor de paquetes o el backend, rompe la integridad. A continuaci\u00f3n, se muestra una tabla con las operaciones m\u00e1s comunes que puedes emplear sobre algunos de los gestores de paquetes m\u00e1s conocidos: Operaciones Gestores apt yum zypper Actualizar listado de paquetes disponibles apt-get update yum check-update zypper refresh Actualizar sistema apt-get upgrade yum update zypper update Instalar paquete apt-get install <pkg> yum install <pkg> zypper install<pkg> Borrar paquete apt-get remove <pkg> yum erase <pkg> zypper remove <pkg> Buscar paquete apt-cache yum list zypper search Buscar repositorio de un paquete apt-cache madison <pkg> yum whatprovides <pkg> zypper whatprovides <pkg> Veamos ahora las operaciones m\u00e1s comunes que puedes emplear sobre los backends dpkg y rpm : Operaciones Backends dpkg rpm Instalar fichero de paquete dpkg -i <file.deb> rpm -ivh <file.rpm> Borrar paquete dpkg -r <pkg> rpm -e <pkg> Paquete que instala el fichero <file> dpkg -S <file> rpm -qf <file> Ficheros del paquete dpkg -L <pkg> rpm -ql <pkg> Descripci\u00f3n del paquete dpkg -s <pkg> rpm -qi <pkg> Paquetes instalados dpkg -l rpm -qa Primera ley de la Ingenier\u00eda de Sistemas, Software Configuration Management, Bersoff, Henderson & Siegel, Prentice-Hall, 1980 \u21a9","title":"Puesta en producci\u00f3n"},{"location":"part2/","text":"PARTE 2 PRIMEROS PASOS Probando migasfree La unidad es la variedad, y la variedad en la unidad es la ley suprema del universo. -- Isaac Newton. El objetivo de este cap\u00edtulo es que dispongas r\u00e1pidamente de un servidor y un cliente migasfree totalmente funcional, por eso no me voy a extender en explicaciones. nota Usa una m\u00e1quina virtual de virtualbox realizando la instalaci\u00f3n m\u00ednima por red de Debian 64 bits para ver el funcionamiento de migasfree y familiarizarte con \u00e9l antes de poner a Migasfree en producci\u00f3n Instalando el servidor Si ahora no quieres preocuparte de c\u00f3mo se realiza esta instalaci\u00f3n, nunca has usado docker o, simplemente, quieres avanzar m\u00e1s r\u00e1pido, te proporcionamos este Open Virtual Appliance (OVA) para que lo ejecutes con virtualbox . Contiene un servidor migasfree ya instalado. Con virtualbox instalado, y una vez descargado el fichero OVA, haz doble click en \u00e9l y, a continuaci\u00f3n, observa las siguientes reglas de reenv\u00edo de puertos accediendo al men\u00fa de virtualbox : configuraci\u00f3n-red-avanzadas-reenv\u00edo de puertos: Nombre Protocolo IP anfitri\u00f3n Puerto IP invitado Puerto invitado ======= ========= ============ ====== == ======== =============== Rule 1 TCP 127.0.0.1 2222 10.0.2.15 22 Rule 2 TCP 127.0.0.1 8080 10.0.2.15 80 Ya puedes arrancar la m\u00e1quina virtual. Los usuarios y contrase\u00f1as de esta m\u00e1quina virtual son: tux:tux y root:root. Para acceder por SSH a esta m\u00e1quina virtual usa: ssh -p 2222 tux@127.0.0.1 Una vez dentro, puedes loguearte como root de la siguiente manera: tux@migasfree:~$ su Para acceder al servidor web instalado en esta m\u00e1quina virtual, usa la URL http://127.0.0.1:8080 desde el equipo anfitri\u00f3n. Ahora bien, si quieres hacer la instalaci\u00f3n t\u00fa mismo, accede a la m\u00e1quina debian 64 bits sobre la que vas a instalar el servidor y sigue los pasos indicados en migasfree-docker . Comprobando el servidor En un navegador web accede a la URL del servidor. Si todo ha ido bien, ver\u00e1s algo similar a la imagen 'Acceso al servidor migasfree'. Acceso al servidor migasfree Pulsa en iniciar sesi\u00f3n y haz login con el nombre de usuario \"admin\" y contrase\u00f1a \"admin\". Ver\u00e1s algo parecido a la imagen 'Estado del servidor con 0 alertas'. Observa como arriba a la derecha pone alertas 0 . Esto nos indica que todo est\u00e1 controlado. Estado del servidor con 0 alertas Instalando el cliente Instalando el paquete migasfree-client Ahora instala el cliente migasfree sobre la misma m\u00e1quina donde has instalado el servidor. Para ello, actualiza la lista de paquetes e instala el paquete migasfree-client : # wget -O - http://migasfree.org/pub/install-client | bash Tambi\u00e9n puedes instalar el cliente en cualquier otra m\u00e1quina y editar el fichero /etc/migasfree.conf manualmente para configurarlo. Descomenta la l\u00ednea # Server = localhost y as\u00edgnale la direcci\u00f3n del servidor web. Te hago notar que esta no es la manera en que debemos hacerlo, pero por ahora puede servirnos. La manera correcta ser\u00eda empaquetar dicha modificaci\u00f3n, cosa que veremos m\u00e1s adelante en Configurando migasfree-client nota Cualquier cambio en la configuraci\u00f3n de las aplicaciones o del S.O se podr\u00e1n realizar de manera centralizada con suma facilidad, manteniendo adem\u00e1s la integridad, s\u00f3lo si dicha configuraci\u00f3n ha sido empaquetada. Registrando el cliente Ejecuta el comando: # migasfree -u te devolver\u00e1 una salida parecida a esta: root@migasfree:/home/tux# migasfree -u Sesi\u00f3n gr\u00e1fica no detectada Versi\u00f3n de migasfree client: 4 .15 Opciones de ejecuci\u00f3n: /etc/migasfree.conf Proyecto: debian-9.3 Servidor: localhost Actualizar paquetes autom\u00e1ticamente: True Proxy: None Certificado SSL: None Proxy cach\u00e9 de paquetes: None Depuraci\u00f3n: False Nombre del ordenador: migasfree GUI detallado: True PMS: apt-get Usuario gr\u00e1fico: root Autoregistrando ordenador... \u00a1Clave /var/migasfree-client/keys/localhost/debian-9.3.pri creada! \u00a1Clave /var/migasfree-client/keys/localhost/server.pub creada! Warning: apt-key output should not be parsed ( stdout is not a terminal ) \u00a1Clave /var/migasfree-client/keys/localhost/repositories.pub creada! ******************* Conectando al servidor migasfree... ******************** ***************************** Correcto ************************ Obteniendo propiedades... ************************* ***************************** Correcto ************************** Evaluando atributos... ************************** PCI: 8086 :1237~Host bridge: Intel Corporation 440FX - 82441FX PMC [ Natoma ] ( rev 02 ) ,8086:7000~ISA bridge: Intel Corporation 82371SB PIIX3 ISA [ Natoma/Triton II ] ,8086:7111~IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE ( rev 01 ) ,80ee:beef~VGA compatible controller: InnoTek Systemberatung GmbH VirtualBox Graphics Adapter ,8086:100e~Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller ( rev 02 ) ,80ee:cafe~System peripheral: InnoTek Systemberatung GmbH VirtualBox Guest Service ,106b:003f~USB controller: Apple Inc. KeyLargo/Intrepid USB ,8086:7113~Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI ( rev 08 ) ,8086:2829~SATA controller: Intel Corporation 82801HM/HEM ( ICH8M/ICH8M-E ) SATA Controller [ AHCI mode ] ( rev 02 ) , HST: migasfree NET: 10 .0.2.0/24 ************************** Subiendo atributos... *************************** ***************************** Correcto *************************** Ejecutando fallas... *************************** LOW_HOME_PARTITION_SPACE: LOW_SYSTEM_PARTITION_SPACE: **************************** Subiendo fallas... **************************** ***************************** Correcto ************************* Creando repositorios... ************************** ***************************** Correcto ************* Obteniendo los metadatos de los repositorios... ************** Ign:1 http://ftp.es.debian.org/debian stretch InRelease Obj:2 http://security.debian.org/debian-security stretch/updates InRelease Obj:3 http://ftp.es.debian.org/debian stretch-updates InRelease Obj:4 http://ftp.es.debian.org/debian stretch Release Obj:5 https://download.docker.com/linux/debian stretch InRelease Leyendo lista de paquetes... Hecho ***************************** Correcto ************************ Desinstalando paquetes... ************************* ***************************** Correcto ******************* Instalando paquetes obligatorios... ******************** ***************************** Correcto ************************* Actualizando paquetes... ************************* DEBIAN_FRONTEND = noninteractive /usr/bin/apt-get -o APT::Get::Purge = true -o Dpkg::Options:: = --force-confdef -o Dpkg::Options:: = --force-confold -o Debug::pkgProblemResolver = 1 --assume-yes --force-yes --allow-unauthenticated --auto-remove dist-upgrade Leyendo lista de paquetes... Creando \u00e1rbol de dependencias... Leyendo la informaci\u00f3n de estado... Calculando la actualizaci\u00f3n... 0 actualizados, 0 nuevos se instalar\u00e1n, 0 para eliminar y 0 no actualizados. ***************************** Correcto ****************** Subiendo el inventario del software... ****************** ***************************** Correcto *************** Capturando informaci\u00f3n sobre el hardware... *************** ***************************** Correcto **************** Enviando informaci\u00f3n sobre el hardware... **************** ***************************** Correcto ************************* Operaciones completadas ************************** Comprobando el estado del servidor Comprueba los datos que se han recogido accediendo al servidor con tu navegador web. F\u00edjate ahora que tienes 2 Alertas (ver imagen notificaciones). Pulsa sobre ellas y luego sobre 2 alertas por comprobar : La primera te notifica que el ordenador CID-1 ha dado de alta la plataforma Linux . La segunda notificaci\u00f3n te dice que el ordenador CID-1 ha a\u00f1adido el proyecto debian-x.x . Notificaciones Echa un vistazo r\u00e1pido al ordenador pulsando en la lupa y luego en ordenador (ver imagen Ordenadores) Observa los datos del ordenador pulsando sobre CID-1 . F\u00edjate en la fecha de la sicronizaci\u00f3n. Consulta el hardware pulsando sobre el campo producto . Ordenadores nota CID es un acr\u00f3nimo de Computer IDentificator . Es un n\u00famero que el servidor asigna a cada ordenador para identificarlo. Es imposible tener dos ordenadores con el mismo CID. nota El s\u00edmbolo que aparece a la izquierda del CID (el coraz\u00f3n) indica el estado en el que encuentra el ordenador. \u00a1Enhorabuena! Has instalado un servidor migasfree y has registrado en \u00e9l tu primer ordenador. Desplegando software Y ahora, para ir abriendo boca, vamos a instalar y eliminar aplicaciones de manera centralizada usando el servidor migasfree . Sup\u00f3n que quieres sustituir nano por vim en todos los equipos de tu organizaci\u00f3n. Accede a Liberaci\u00f3n - Despliegues y pulsa en en s\u00edmbolo + para a\u00f1adir un despliegue. nota Sit\u00faa el cursor sobre los iconos del formulario de despliegue para identificar cada campo. Introduce los siguientes datos: Nombre : sustituir nano por vim proyecto : (el que corresponda) paquetes a instalar : vim paquetes a desinstalar : nano atributos incluidos : ALL SYSTEMS Graba el despliegue. Ahora sincroniza el equipo cliente con el servidor migasfree : # migasfree -u Puedes comprobar en la salida est\u00e1ndar del cliente migasfree que se ha configurado el repositorio sustituir-nano-por-vim y que se ha instalado el paquete vim y desinstalado nano . ************* Obteniendo los metadatos de los repositorios... ************** Obj http://localhost sustituir-nano-por-vim InRelease Des:1 http://localhost sustituir-nano-por-vim/PKGS amd64 Packages [ 29 B ] ************************ Desinstalando paquetes... ************************* Los siguientes paquetes se ELIMINAR\u00c1N: nano* ***************************** Correcto ******************* Instalando paquetes obligatorios... ******************** Se instalar\u00e1n los siguientes paquetes NUEVOS: vim ***************************** Correcto nota En el despliegue que acabamos de hacer s\u00f3lo hemos dado la orden de instalar y desinstalar paquetes, pero adem\u00e1s se ha creado un repositorio de paquetes vac\u00edo . En los siguientes cap\u00edtulos aprender\u00e1s a subir tus propios paquetes al servidor e introducirlos en los despliegues, pero vayamos despacito, suave, suavecito. Al poner el atributo SET-ALL SYSTEMS estamos indicando que se aplique este despliegue a todos los ordenadores. Podr\u00edamos haber incluido otros atributos como CID-1 , NET-10.0.2.0/24 , o una lista de ellos. S\u00f3lo se aplicar\u00e1 este despliegue a los ordenadores que tengan alg\u00fan atributo coincidente con los atributos incluidos en el despliegue. Observa que tambi\u00e9n puedes excluir ordenadores. El servidor sigue la siguiente l\u00f3gica: primero comprueba los ordenadores incluidos y despu\u00e9s excluye los ordenadores que tenga alg\u00fan atributo que coincida con los atributos excluidos del despliegue. nota Ahora cada vez que un ordenador se sincroniza con el servidor (y se le aplica este despliegue), se instala vim y desinstala nano si es necesario. Si ahora queremos instalar vim y emacs en todos los ordenadores, pon sus nombres en paquetes a instalar y deja en blanco paquetes a desinstalar : paquetes a instalar : vim emacs paquetes a desinstalar : Conforme los equipos se vayan sincronizando, se producir\u00e1n los cambios. Aprender\u00e1s m\u00e1s sobre los despliegues en el cap\u00edtulo dedicado a La Liberaci\u00f3n. \u00a1Enhorabuena de nuevo! Ya sabes como instalar/desinstalar software de manera centralizada a un conjunto de ordenadores. No est\u00e1 nada mal para empezar, \u00bfno crees? En el siguiente cap\u00edtulo vas a aprender a hacer el cambio de configuraci\u00f3n software al estilo migasfree .","title":"Primeros pasos"},{"location":"part2/#primeros-pasos","text":"","title":"PRIMEROS PASOS"},{"location":"part2/#probando-migasfree","text":"La unidad es la variedad, y la variedad en la unidad es la ley suprema del universo. -- Isaac Newton. El objetivo de este cap\u00edtulo es que dispongas r\u00e1pidamente de un servidor y un cliente migasfree totalmente funcional, por eso no me voy a extender en explicaciones. nota Usa una m\u00e1quina virtual de virtualbox realizando la instalaci\u00f3n m\u00ednima por red de Debian 64 bits para ver el funcionamiento de migasfree y familiarizarte con \u00e9l antes de poner a Migasfree en producci\u00f3n","title":"Probando migasfree"},{"location":"part2/#instalando-el-servidor","text":"Si ahora no quieres preocuparte de c\u00f3mo se realiza esta instalaci\u00f3n, nunca has usado docker o, simplemente, quieres avanzar m\u00e1s r\u00e1pido, te proporcionamos este Open Virtual Appliance (OVA) para que lo ejecutes con virtualbox . Contiene un servidor migasfree ya instalado. Con virtualbox instalado, y una vez descargado el fichero OVA, haz doble click en \u00e9l y, a continuaci\u00f3n, observa las siguientes reglas de reenv\u00edo de puertos accediendo al men\u00fa de virtualbox : configuraci\u00f3n-red-avanzadas-reenv\u00edo de puertos: Nombre Protocolo IP anfitri\u00f3n Puerto IP invitado Puerto invitado ======= ========= ============ ====== == ======== =============== Rule 1 TCP 127.0.0.1 2222 10.0.2.15 22 Rule 2 TCP 127.0.0.1 8080 10.0.2.15 80 Ya puedes arrancar la m\u00e1quina virtual. Los usuarios y contrase\u00f1as de esta m\u00e1quina virtual son: tux:tux y root:root. Para acceder por SSH a esta m\u00e1quina virtual usa: ssh -p 2222 tux@127.0.0.1 Una vez dentro, puedes loguearte como root de la siguiente manera: tux@migasfree:~$ su Para acceder al servidor web instalado en esta m\u00e1quina virtual, usa la URL http://127.0.0.1:8080 desde el equipo anfitri\u00f3n. Ahora bien, si quieres hacer la instalaci\u00f3n t\u00fa mismo, accede a la m\u00e1quina debian 64 bits sobre la que vas a instalar el servidor y sigue los pasos indicados en migasfree-docker .","title":"Instalando el servidor"},{"location":"part2/#comprobando-el-servidor","text":"En un navegador web accede a la URL del servidor. Si todo ha ido bien, ver\u00e1s algo similar a la imagen 'Acceso al servidor migasfree'. Acceso al servidor migasfree Pulsa en iniciar sesi\u00f3n y haz login con el nombre de usuario \"admin\" y contrase\u00f1a \"admin\". Ver\u00e1s algo parecido a la imagen 'Estado del servidor con 0 alertas'. Observa como arriba a la derecha pone alertas 0 . Esto nos indica que todo est\u00e1 controlado. Estado del servidor con 0 alertas","title":"Comprobando el servidor"},{"location":"part2/#instalando-el-cliente","text":"","title":"Instalando el cliente"},{"location":"part2/#instalando-el-paquete-migasfree-client","text":"Ahora instala el cliente migasfree sobre la misma m\u00e1quina donde has instalado el servidor. Para ello, actualiza la lista de paquetes e instala el paquete migasfree-client : # wget -O - http://migasfree.org/pub/install-client | bash Tambi\u00e9n puedes instalar el cliente en cualquier otra m\u00e1quina y editar el fichero /etc/migasfree.conf manualmente para configurarlo. Descomenta la l\u00ednea # Server = localhost y as\u00edgnale la direcci\u00f3n del servidor web. Te hago notar que esta no es la manera en que debemos hacerlo, pero por ahora puede servirnos. La manera correcta ser\u00eda empaquetar dicha modificaci\u00f3n, cosa que veremos m\u00e1s adelante en Configurando migasfree-client nota Cualquier cambio en la configuraci\u00f3n de las aplicaciones o del S.O se podr\u00e1n realizar de manera centralizada con suma facilidad, manteniendo adem\u00e1s la integridad, s\u00f3lo si dicha configuraci\u00f3n ha sido empaquetada.","title":"Instalando el paquete migasfree-client"},{"location":"part2/#registrando-el-cliente","text":"Ejecuta el comando: # migasfree -u te devolver\u00e1 una salida parecida a esta: root@migasfree:/home/tux# migasfree -u Sesi\u00f3n gr\u00e1fica no detectada Versi\u00f3n de migasfree client: 4 .15 Opciones de ejecuci\u00f3n: /etc/migasfree.conf Proyecto: debian-9.3 Servidor: localhost Actualizar paquetes autom\u00e1ticamente: True Proxy: None Certificado SSL: None Proxy cach\u00e9 de paquetes: None Depuraci\u00f3n: False Nombre del ordenador: migasfree GUI detallado: True PMS: apt-get Usuario gr\u00e1fico: root Autoregistrando ordenador... \u00a1Clave /var/migasfree-client/keys/localhost/debian-9.3.pri creada! \u00a1Clave /var/migasfree-client/keys/localhost/server.pub creada! Warning: apt-key output should not be parsed ( stdout is not a terminal ) \u00a1Clave /var/migasfree-client/keys/localhost/repositories.pub creada! ******************* Conectando al servidor migasfree... ******************** ***************************** Correcto ************************ Obteniendo propiedades... ************************* ***************************** Correcto ************************** Evaluando atributos... ************************** PCI: 8086 :1237~Host bridge: Intel Corporation 440FX - 82441FX PMC [ Natoma ] ( rev 02 ) ,8086:7000~ISA bridge: Intel Corporation 82371SB PIIX3 ISA [ Natoma/Triton II ] ,8086:7111~IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE ( rev 01 ) ,80ee:beef~VGA compatible controller: InnoTek Systemberatung GmbH VirtualBox Graphics Adapter ,8086:100e~Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller ( rev 02 ) ,80ee:cafe~System peripheral: InnoTek Systemberatung GmbH VirtualBox Guest Service ,106b:003f~USB controller: Apple Inc. KeyLargo/Intrepid USB ,8086:7113~Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI ( rev 08 ) ,8086:2829~SATA controller: Intel Corporation 82801HM/HEM ( ICH8M/ICH8M-E ) SATA Controller [ AHCI mode ] ( rev 02 ) , HST: migasfree NET: 10 .0.2.0/24 ************************** Subiendo atributos... *************************** ***************************** Correcto *************************** Ejecutando fallas... *************************** LOW_HOME_PARTITION_SPACE: LOW_SYSTEM_PARTITION_SPACE: **************************** Subiendo fallas... **************************** ***************************** Correcto ************************* Creando repositorios... ************************** ***************************** Correcto ************* Obteniendo los metadatos de los repositorios... ************** Ign:1 http://ftp.es.debian.org/debian stretch InRelease Obj:2 http://security.debian.org/debian-security stretch/updates InRelease Obj:3 http://ftp.es.debian.org/debian stretch-updates InRelease Obj:4 http://ftp.es.debian.org/debian stretch Release Obj:5 https://download.docker.com/linux/debian stretch InRelease Leyendo lista de paquetes... Hecho ***************************** Correcto ************************ Desinstalando paquetes... ************************* ***************************** Correcto ******************* Instalando paquetes obligatorios... ******************** ***************************** Correcto ************************* Actualizando paquetes... ************************* DEBIAN_FRONTEND = noninteractive /usr/bin/apt-get -o APT::Get::Purge = true -o Dpkg::Options:: = --force-confdef -o Dpkg::Options:: = --force-confold -o Debug::pkgProblemResolver = 1 --assume-yes --force-yes --allow-unauthenticated --auto-remove dist-upgrade Leyendo lista de paquetes... Creando \u00e1rbol de dependencias... Leyendo la informaci\u00f3n de estado... Calculando la actualizaci\u00f3n... 0 actualizados, 0 nuevos se instalar\u00e1n, 0 para eliminar y 0 no actualizados. ***************************** Correcto ****************** Subiendo el inventario del software... ****************** ***************************** Correcto *************** Capturando informaci\u00f3n sobre el hardware... *************** ***************************** Correcto **************** Enviando informaci\u00f3n sobre el hardware... **************** ***************************** Correcto ************************* Operaciones completadas **************************","title":"Registrando el cliente"},{"location":"part2/#comprobando-el-estado-del-servidor","text":"Comprueba los datos que se han recogido accediendo al servidor con tu navegador web. F\u00edjate ahora que tienes 2 Alertas (ver imagen notificaciones). Pulsa sobre ellas y luego sobre 2 alertas por comprobar : La primera te notifica que el ordenador CID-1 ha dado de alta la plataforma Linux . La segunda notificaci\u00f3n te dice que el ordenador CID-1 ha a\u00f1adido el proyecto debian-x.x . Notificaciones Echa un vistazo r\u00e1pido al ordenador pulsando en la lupa y luego en ordenador (ver imagen Ordenadores) Observa los datos del ordenador pulsando sobre CID-1 . F\u00edjate en la fecha de la sicronizaci\u00f3n. Consulta el hardware pulsando sobre el campo producto . Ordenadores nota CID es un acr\u00f3nimo de Computer IDentificator . Es un n\u00famero que el servidor asigna a cada ordenador para identificarlo. Es imposible tener dos ordenadores con el mismo CID. nota El s\u00edmbolo que aparece a la izquierda del CID (el coraz\u00f3n) indica el estado en el que encuentra el ordenador. \u00a1Enhorabuena! Has instalado un servidor migasfree y has registrado en \u00e9l tu primer ordenador.","title":"Comprobando el estado del servidor"},{"location":"part2/#desplegando-software","text":"Y ahora, para ir abriendo boca, vamos a instalar y eliminar aplicaciones de manera centralizada usando el servidor migasfree . Sup\u00f3n que quieres sustituir nano por vim en todos los equipos de tu organizaci\u00f3n. Accede a Liberaci\u00f3n - Despliegues y pulsa en en s\u00edmbolo + para a\u00f1adir un despliegue. nota Sit\u00faa el cursor sobre los iconos del formulario de despliegue para identificar cada campo. Introduce los siguientes datos: Nombre : sustituir nano por vim proyecto : (el que corresponda) paquetes a instalar : vim paquetes a desinstalar : nano atributos incluidos : ALL SYSTEMS Graba el despliegue. Ahora sincroniza el equipo cliente con el servidor migasfree : # migasfree -u Puedes comprobar en la salida est\u00e1ndar del cliente migasfree que se ha configurado el repositorio sustituir-nano-por-vim y que se ha instalado el paquete vim y desinstalado nano . ************* Obteniendo los metadatos de los repositorios... ************** Obj http://localhost sustituir-nano-por-vim InRelease Des:1 http://localhost sustituir-nano-por-vim/PKGS amd64 Packages [ 29 B ] ************************ Desinstalando paquetes... ************************* Los siguientes paquetes se ELIMINAR\u00c1N: nano* ***************************** Correcto ******************* Instalando paquetes obligatorios... ******************** Se instalar\u00e1n los siguientes paquetes NUEVOS: vim ***************************** Correcto nota En el despliegue que acabamos de hacer s\u00f3lo hemos dado la orden de instalar y desinstalar paquetes, pero adem\u00e1s se ha creado un repositorio de paquetes vac\u00edo . En los siguientes cap\u00edtulos aprender\u00e1s a subir tus propios paquetes al servidor e introducirlos en los despliegues, pero vayamos despacito, suave, suavecito. Al poner el atributo SET-ALL SYSTEMS estamos indicando que se aplique este despliegue a todos los ordenadores. Podr\u00edamos haber incluido otros atributos como CID-1 , NET-10.0.2.0/24 , o una lista de ellos. S\u00f3lo se aplicar\u00e1 este despliegue a los ordenadores que tengan alg\u00fan atributo coincidente con los atributos incluidos en el despliegue. Observa que tambi\u00e9n puedes excluir ordenadores. El servidor sigue la siguiente l\u00f3gica: primero comprueba los ordenadores incluidos y despu\u00e9s excluye los ordenadores que tenga alg\u00fan atributo que coincida con los atributos excluidos del despliegue. nota Ahora cada vez que un ordenador se sincroniza con el servidor (y se le aplica este despliegue), se instala vim y desinstala nano si es necesario. Si ahora queremos instalar vim y emacs en todos los ordenadores, pon sus nombres en paquetes a instalar y deja en blanco paquetes a desinstalar : paquetes a instalar : vim emacs paquetes a desinstalar : Conforme los equipos se vayan sincronizando, se producir\u00e1n los cambios. Aprender\u00e1s m\u00e1s sobre los despliegues en el cap\u00edtulo dedicado a La Liberaci\u00f3n. \u00a1Enhorabuena de nuevo! Ya sabes como instalar/desinstalar software de manera centralizada a un conjunto de ordenadores. No est\u00e1 nada mal para empezar, \u00bfno crees? En el siguiente cap\u00edtulo vas a aprender a hacer el cambio de configuraci\u00f3n software al estilo migasfree .","title":"Desplegando software"},{"location":"part2/probando_migasfree/","text":"Probando migasfree La unidad es la variedad, y la variedad en la unidad es la ley suprema del universo. -- Isaac Newton. El objetivo de este cap\u00edtulo es que dispongas r\u00e1pidamente de un servidor y un cliente migasfree totalmente funcional, por eso no me voy a extender en explicaciones. nota Usa una m\u00e1quina virtual de virtualbox realizando la instalaci\u00f3n m\u00ednima por red de Debian 64 bits para ver el funcionamiento de migasfree y familiarizarte con \u00e9l antes de poner a Migasfree en producci\u00f3n Instalando el servidor Si ahora no quieres preocuparte de c\u00f3mo se realiza esta instalaci\u00f3n, nunca has usado docker o, simplemente, quieres avanzar m\u00e1s r\u00e1pido, te proporcionamos este Open Virtual Appliance (OVA) para que lo ejecutes con virtualbox . Contiene un servidor migasfree ya instalado. Con virtualbox instalado, y una vez descargado el fichero OVA, haz doble click en \u00e9l y, a continuaci\u00f3n, observa las siguientes reglas de reenv\u00edo de puertos accediendo al men\u00fa de virtualbox : configuraci\u00f3n-red-avanzadas-reenv\u00edo de puertos: Nombre Protocolo IP anfitri\u00f3n Puerto IP invitado Puerto invitado ======= ========= ============ ====== == ======== =============== Rule 1 TCP 127.0.0.1 2222 10.0.2.15 22 Rule 2 TCP 127.0.0.1 8080 10.0.2.15 80 Ya puedes arrancar la m\u00e1quina virtual. Los usuarios y contrase\u00f1as de esta m\u00e1quina virtual son: tux:tux y root:root. Para acceder por SSH a esta m\u00e1quina virtual usa: ssh -p 2222 tux@127.0.0.1 Una vez dentro, puedes loguearte como root de la siguiente manera: tux@migasfree:~$ su Para acceder al servidor web instalado en esta m\u00e1quina virtual, usa la URL http://127.0.0.1:8080 desde el equipo anfitri\u00f3n. Ahora bien, si quieres hacer la instalaci\u00f3n t\u00fa mismo, accede a la m\u00e1quina debian 64 bits sobre la que vas a instalar el servidor y sigue los pasos indicados en migasfree-docker . Comprobando el servidor En un navegador web accede a la URL del servidor. Si todo ha ido bien, ver\u00e1s algo similar a la imagen 'Acceso al servidor migasfree'. Acceso al servidor migasfree Pulsa en iniciar sesi\u00f3n y haz login con el nombre de usuario \"admin\" y contrase\u00f1a \"admin\". Ver\u00e1s algo parecido a la imagen 'Estado del servidor con 0 alertas'. Observa como arriba a la derecha pone alertas 0 . Esto nos indica que todo est\u00e1 controlado. Estado del servidor con 0 alertas Instalando el cliente Instalando el paquete migasfree-client Ahora instala el cliente migasfree sobre la misma m\u00e1quina donde has instalado el servidor. Para ello, actualiza la lista de paquetes e instala el paquete migasfree-client : # wget -O - http://migasfree.org/pub/install-client | bash Tambi\u00e9n puedes instalar el cliente en cualquier otra m\u00e1quina y editar el fichero /etc/migasfree.conf manualmente para configurarlo. Descomenta la l\u00ednea # Server = localhost y as\u00edgnale la direcci\u00f3n del servidor web. Te hago notar que esta no es la manera en que debemos hacerlo, pero por ahora puede servirnos. La manera correcta ser\u00eda empaquetar dicha modificaci\u00f3n, cosa que veremos m\u00e1s adelante en Configurando migasfree-client nota Cualquier cambio en la configuraci\u00f3n de las aplicaciones o del S.O se podr\u00e1n realizar de manera centralizada con suma facilidad, manteniendo adem\u00e1s la integridad, s\u00f3lo si dicha configuraci\u00f3n ha sido empaquetada. Registrando el cliente Ejecuta el comando: # migasfree -u te devolver\u00e1 una salida parecida a esta: root@migasfree:/home/tux# migasfree -u Sesi\u00f3n gr\u00e1fica no detectada Versi\u00f3n de migasfree client: 4 .15 Opciones de ejecuci\u00f3n: /etc/migasfree.conf Proyecto: debian-9.3 Servidor: localhost Actualizar paquetes autom\u00e1ticamente: True Proxy: None Certificado SSL: None Proxy cach\u00e9 de paquetes: None Depuraci\u00f3n: False Nombre del ordenador: migasfree GUI detallado: True PMS: apt-get Usuario gr\u00e1fico: root Autoregistrando ordenador... \u00a1Clave /var/migasfree-client/keys/localhost/debian-9.3.pri creada! \u00a1Clave /var/migasfree-client/keys/localhost/server.pub creada! Warning: apt-key output should not be parsed ( stdout is not a terminal ) \u00a1Clave /var/migasfree-client/keys/localhost/repositories.pub creada! ******************* Conectando al servidor migasfree... ******************** ***************************** Correcto ************************ Obteniendo propiedades... ************************* ***************************** Correcto ************************** Evaluando atributos... ************************** PCI: 8086 :1237~Host bridge: Intel Corporation 440FX - 82441FX PMC [ Natoma ] ( rev 02 ) ,8086:7000~ISA bridge: Intel Corporation 82371SB PIIX3 ISA [ Natoma/Triton II ] ,8086:7111~IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE ( rev 01 ) ,80ee:beef~VGA compatible controller: InnoTek Systemberatung GmbH VirtualBox Graphics Adapter ,8086:100e~Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller ( rev 02 ) ,80ee:cafe~System peripheral: InnoTek Systemberatung GmbH VirtualBox Guest Service ,106b:003f~USB controller: Apple Inc. KeyLargo/Intrepid USB ,8086:7113~Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI ( rev 08 ) ,8086:2829~SATA controller: Intel Corporation 82801HM/HEM ( ICH8M/ICH8M-E ) SATA Controller [ AHCI mode ] ( rev 02 ) , HST: migasfree NET: 10 .0.2.0/24 ************************** Subiendo atributos... *************************** ***************************** Correcto *************************** Ejecutando fallas... *************************** LOW_HOME_PARTITION_SPACE: LOW_SYSTEM_PARTITION_SPACE: **************************** Subiendo fallas... **************************** ***************************** Correcto ************************* Creando repositorios... ************************** ***************************** Correcto ************* Obteniendo los metadatos de los repositorios... ************** Ign:1 http://ftp.es.debian.org/debian stretch InRelease Obj:2 http://security.debian.org/debian-security stretch/updates InRelease Obj:3 http://ftp.es.debian.org/debian stretch-updates InRelease Obj:4 http://ftp.es.debian.org/debian stretch Release Obj:5 https://download.docker.com/linux/debian stretch InRelease Leyendo lista de paquetes... Hecho ***************************** Correcto ************************ Desinstalando paquetes... ************************* ***************************** Correcto ******************* Instalando paquetes obligatorios... ******************** ***************************** Correcto ************************* Actualizando paquetes... ************************* DEBIAN_FRONTEND = noninteractive /usr/bin/apt-get -o APT::Get::Purge = true -o Dpkg::Options:: = --force-confdef -o Dpkg::Options:: = --force-confold -o Debug::pkgProblemResolver = 1 --assume-yes --force-yes --allow-unauthenticated --auto-remove dist-upgrade Leyendo lista de paquetes... Creando \u00e1rbol de dependencias... Leyendo la informaci\u00f3n de estado... Calculando la actualizaci\u00f3n... 0 actualizados, 0 nuevos se instalar\u00e1n, 0 para eliminar y 0 no actualizados. ***************************** Correcto ****************** Subiendo el inventario del software... ****************** ***************************** Correcto *************** Capturando informaci\u00f3n sobre el hardware... *************** ***************************** Correcto **************** Enviando informaci\u00f3n sobre el hardware... **************** ***************************** Correcto ************************* Operaciones completadas ************************** Comprobando el estado del servidor Comprueba los datos que se han recogido accediendo al servidor con tu navegador web. F\u00edjate ahora que tienes 2 Alertas (ver imagen notificaciones). Pulsa sobre ellas y luego sobre 2 alertas por comprobar : La primera te notifica que el ordenador CID-1 ha dado de alta la plataforma Linux . La segunda notificaci\u00f3n te dice que el ordenador CID-1 ha a\u00f1adido el proyecto debian-x.x . Notificaciones Echa un vistazo r\u00e1pido al ordenador pulsando en la lupa y luego en ordenador (ver imagen Ordenadores) Observa los datos del ordenador pulsando sobre CID-1 . F\u00edjate en la fecha de la sicronizaci\u00f3n. Consulta el hardware pulsando sobre el campo producto . Ordenadores nota CID es un acr\u00f3nimo de Computer IDentificator . Es un n\u00famero que el servidor asigna a cada ordenador para identificarlo. Es imposible tener dos ordenadores con el mismo CID. nota El s\u00edmbolo que aparece a la izquierda del CID (el coraz\u00f3n) indica el estado en el que encuentra el ordenador. \u00a1Enhorabuena! Has instalado un servidor migasfree y has registrado en \u00e9l tu primer ordenador. Desplegando software Y ahora, para ir abriendo boca, vamos a instalar y eliminar aplicaciones de manera centralizada usando el servidor migasfree . Sup\u00f3n que quieres sustituir nano por vim en todos los equipos de tu organizaci\u00f3n. Accede a Liberaci\u00f3n - Despliegues y pulsa en en s\u00edmbolo + para a\u00f1adir un despliegue. nota Sit\u00faa el cursor sobre los iconos del formulario de despliegue para identificar cada campo. Introduce los siguientes datos: Nombre : sustituir nano por vim proyecto : (el que corresponda) paquetes a instalar : vim paquetes a desinstalar : nano atributos incluidos : ALL SYSTEMS Graba el despliegue. Ahora sincroniza el equipo cliente con el servidor migasfree : # migasfree -u Puedes comprobar en la salida est\u00e1ndar del cliente migasfree que se ha configurado el repositorio sustituir-nano-por-vim y que se ha instalado el paquete vim y desinstalado nano . ************* Obteniendo los metadatos de los repositorios... ************** Obj http://localhost sustituir-nano-por-vim InRelease Des:1 http://localhost sustituir-nano-por-vim/PKGS amd64 Packages [ 29 B ] ************************ Desinstalando paquetes... ************************* Los siguientes paquetes se ELIMINAR\u00c1N: nano* ***************************** Correcto ******************* Instalando paquetes obligatorios... ******************** Se instalar\u00e1n los siguientes paquetes NUEVOS: vim ***************************** Correcto nota En el despliegue que acabamos de hacer s\u00f3lo hemos dado la orden de instalar y desinstalar paquetes, pero adem\u00e1s se ha creado un repositorio de paquetes vac\u00edo . En los siguientes cap\u00edtulos aprender\u00e1s a subir tus propios paquetes al servidor e introducirlos en los despliegues, pero vayamos despacito, suave, suavecito. Al poner el atributo SET-ALL SYSTEMS estamos indicando que se aplique este despliegue a todos los ordenadores. Podr\u00edamos haber incluido otros atributos como CID-1 , NET-10.0.2.0/24 , o una lista de ellos. S\u00f3lo se aplicar\u00e1 este despliegue a los ordenadores que tengan alg\u00fan atributo coincidente con los atributos incluidos en el despliegue. Observa que tambi\u00e9n puedes excluir ordenadores. El servidor sigue la siguiente l\u00f3gica: primero comprueba los ordenadores incluidos y despu\u00e9s excluye los ordenadores que tenga alg\u00fan atributo que coincida con los atributos excluidos del despliegue. nota Ahora cada vez que un ordenador se sincroniza con el servidor (y se le aplica este despliegue), se instala vim y desinstala nano si es necesario. Si ahora queremos instalar vim y emacs en todos los ordenadores, pon sus nombres en paquetes a instalar y deja en blanco paquetes a desinstalar : paquetes a instalar : vim emacs paquetes a desinstalar : Conforme los equipos se vayan sincronizando, se producir\u00e1n los cambios. Aprender\u00e1s m\u00e1s sobre los despliegues en el cap\u00edtulo dedicado a La Liberaci\u00f3n. \u00a1Enhorabuena de nuevo! Ya sabes como instalar/desinstalar software de manera centralizada a un conjunto de ordenadores. No est\u00e1 nada mal para empezar, \u00bfno crees? En el siguiente cap\u00edtulo vas a aprender a hacer el cambio de configuraci\u00f3n software al estilo migasfree .","title":"Probando migasfree"},{"location":"part2/probando_migasfree/#probando-migasfree","text":"La unidad es la variedad, y la variedad en la unidad es la ley suprema del universo. -- Isaac Newton. El objetivo de este cap\u00edtulo es que dispongas r\u00e1pidamente de un servidor y un cliente migasfree totalmente funcional, por eso no me voy a extender en explicaciones. nota Usa una m\u00e1quina virtual de virtualbox realizando la instalaci\u00f3n m\u00ednima por red de Debian 64 bits para ver el funcionamiento de migasfree y familiarizarte con \u00e9l antes de poner a Migasfree en producci\u00f3n","title":"Probando migasfree"},{"location":"part2/probando_migasfree/#instalando-el-servidor","text":"Si ahora no quieres preocuparte de c\u00f3mo se realiza esta instalaci\u00f3n, nunca has usado docker o, simplemente, quieres avanzar m\u00e1s r\u00e1pido, te proporcionamos este Open Virtual Appliance (OVA) para que lo ejecutes con virtualbox . Contiene un servidor migasfree ya instalado. Con virtualbox instalado, y una vez descargado el fichero OVA, haz doble click en \u00e9l y, a continuaci\u00f3n, observa las siguientes reglas de reenv\u00edo de puertos accediendo al men\u00fa de virtualbox : configuraci\u00f3n-red-avanzadas-reenv\u00edo de puertos: Nombre Protocolo IP anfitri\u00f3n Puerto IP invitado Puerto invitado ======= ========= ============ ====== == ======== =============== Rule 1 TCP 127.0.0.1 2222 10.0.2.15 22 Rule 2 TCP 127.0.0.1 8080 10.0.2.15 80 Ya puedes arrancar la m\u00e1quina virtual. Los usuarios y contrase\u00f1as de esta m\u00e1quina virtual son: tux:tux y root:root. Para acceder por SSH a esta m\u00e1quina virtual usa: ssh -p 2222 tux@127.0.0.1 Una vez dentro, puedes loguearte como root de la siguiente manera: tux@migasfree:~$ su Para acceder al servidor web instalado en esta m\u00e1quina virtual, usa la URL http://127.0.0.1:8080 desde el equipo anfitri\u00f3n. Ahora bien, si quieres hacer la instalaci\u00f3n t\u00fa mismo, accede a la m\u00e1quina debian 64 bits sobre la que vas a instalar el servidor y sigue los pasos indicados en migasfree-docker .","title":"Instalando el servidor"},{"location":"part2/probando_migasfree/#comprobando-el-servidor","text":"En un navegador web accede a la URL del servidor. Si todo ha ido bien, ver\u00e1s algo similar a la imagen 'Acceso al servidor migasfree'. Acceso al servidor migasfree Pulsa en iniciar sesi\u00f3n y haz login con el nombre de usuario \"admin\" y contrase\u00f1a \"admin\". Ver\u00e1s algo parecido a la imagen 'Estado del servidor con 0 alertas'. Observa como arriba a la derecha pone alertas 0 . Esto nos indica que todo est\u00e1 controlado. Estado del servidor con 0 alertas","title":"Comprobando el servidor"},{"location":"part2/probando_migasfree/#instalando-el-cliente","text":"","title":"Instalando el cliente"},{"location":"part2/probando_migasfree/#instalando-el-paquete-migasfree-client","text":"Ahora instala el cliente migasfree sobre la misma m\u00e1quina donde has instalado el servidor. Para ello, actualiza la lista de paquetes e instala el paquete migasfree-client : # wget -O - http://migasfree.org/pub/install-client | bash Tambi\u00e9n puedes instalar el cliente en cualquier otra m\u00e1quina y editar el fichero /etc/migasfree.conf manualmente para configurarlo. Descomenta la l\u00ednea # Server = localhost y as\u00edgnale la direcci\u00f3n del servidor web. Te hago notar que esta no es la manera en que debemos hacerlo, pero por ahora puede servirnos. La manera correcta ser\u00eda empaquetar dicha modificaci\u00f3n, cosa que veremos m\u00e1s adelante en Configurando migasfree-client nota Cualquier cambio en la configuraci\u00f3n de las aplicaciones o del S.O se podr\u00e1n realizar de manera centralizada con suma facilidad, manteniendo adem\u00e1s la integridad, s\u00f3lo si dicha configuraci\u00f3n ha sido empaquetada.","title":"Instalando el paquete migasfree-client"},{"location":"part2/probando_migasfree/#registrando-el-cliente","text":"Ejecuta el comando: # migasfree -u te devolver\u00e1 una salida parecida a esta: root@migasfree:/home/tux# migasfree -u Sesi\u00f3n gr\u00e1fica no detectada Versi\u00f3n de migasfree client: 4 .15 Opciones de ejecuci\u00f3n: /etc/migasfree.conf Proyecto: debian-9.3 Servidor: localhost Actualizar paquetes autom\u00e1ticamente: True Proxy: None Certificado SSL: None Proxy cach\u00e9 de paquetes: None Depuraci\u00f3n: False Nombre del ordenador: migasfree GUI detallado: True PMS: apt-get Usuario gr\u00e1fico: root Autoregistrando ordenador... \u00a1Clave /var/migasfree-client/keys/localhost/debian-9.3.pri creada! \u00a1Clave /var/migasfree-client/keys/localhost/server.pub creada! Warning: apt-key output should not be parsed ( stdout is not a terminal ) \u00a1Clave /var/migasfree-client/keys/localhost/repositories.pub creada! ******************* Conectando al servidor migasfree... ******************** ***************************** Correcto ************************ Obteniendo propiedades... ************************* ***************************** Correcto ************************** Evaluando atributos... ************************** PCI: 8086 :1237~Host bridge: Intel Corporation 440FX - 82441FX PMC [ Natoma ] ( rev 02 ) ,8086:7000~ISA bridge: Intel Corporation 82371SB PIIX3 ISA [ Natoma/Triton II ] ,8086:7111~IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE ( rev 01 ) ,80ee:beef~VGA compatible controller: InnoTek Systemberatung GmbH VirtualBox Graphics Adapter ,8086:100e~Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller ( rev 02 ) ,80ee:cafe~System peripheral: InnoTek Systemberatung GmbH VirtualBox Guest Service ,106b:003f~USB controller: Apple Inc. KeyLargo/Intrepid USB ,8086:7113~Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI ( rev 08 ) ,8086:2829~SATA controller: Intel Corporation 82801HM/HEM ( ICH8M/ICH8M-E ) SATA Controller [ AHCI mode ] ( rev 02 ) , HST: migasfree NET: 10 .0.2.0/24 ************************** Subiendo atributos... *************************** ***************************** Correcto *************************** Ejecutando fallas... *************************** LOW_HOME_PARTITION_SPACE: LOW_SYSTEM_PARTITION_SPACE: **************************** Subiendo fallas... **************************** ***************************** Correcto ************************* Creando repositorios... ************************** ***************************** Correcto ************* Obteniendo los metadatos de los repositorios... ************** Ign:1 http://ftp.es.debian.org/debian stretch InRelease Obj:2 http://security.debian.org/debian-security stretch/updates InRelease Obj:3 http://ftp.es.debian.org/debian stretch-updates InRelease Obj:4 http://ftp.es.debian.org/debian stretch Release Obj:5 https://download.docker.com/linux/debian stretch InRelease Leyendo lista de paquetes... Hecho ***************************** Correcto ************************ Desinstalando paquetes... ************************* ***************************** Correcto ******************* Instalando paquetes obligatorios... ******************** ***************************** Correcto ************************* Actualizando paquetes... ************************* DEBIAN_FRONTEND = noninteractive /usr/bin/apt-get -o APT::Get::Purge = true -o Dpkg::Options:: = --force-confdef -o Dpkg::Options:: = --force-confold -o Debug::pkgProblemResolver = 1 --assume-yes --force-yes --allow-unauthenticated --auto-remove dist-upgrade Leyendo lista de paquetes... Creando \u00e1rbol de dependencias... Leyendo la informaci\u00f3n de estado... Calculando la actualizaci\u00f3n... 0 actualizados, 0 nuevos se instalar\u00e1n, 0 para eliminar y 0 no actualizados. ***************************** Correcto ****************** Subiendo el inventario del software... ****************** ***************************** Correcto *************** Capturando informaci\u00f3n sobre el hardware... *************** ***************************** Correcto **************** Enviando informaci\u00f3n sobre el hardware... **************** ***************************** Correcto ************************* Operaciones completadas **************************","title":"Registrando el cliente"},{"location":"part2/probando_migasfree/#comprobando-el-estado-del-servidor","text":"Comprueba los datos que se han recogido accediendo al servidor con tu navegador web. F\u00edjate ahora que tienes 2 Alertas (ver imagen notificaciones). Pulsa sobre ellas y luego sobre 2 alertas por comprobar : La primera te notifica que el ordenador CID-1 ha dado de alta la plataforma Linux . La segunda notificaci\u00f3n te dice que el ordenador CID-1 ha a\u00f1adido el proyecto debian-x.x . Notificaciones Echa un vistazo r\u00e1pido al ordenador pulsando en la lupa y luego en ordenador (ver imagen Ordenadores) Observa los datos del ordenador pulsando sobre CID-1 . F\u00edjate en la fecha de la sicronizaci\u00f3n. Consulta el hardware pulsando sobre el campo producto . Ordenadores nota CID es un acr\u00f3nimo de Computer IDentificator . Es un n\u00famero que el servidor asigna a cada ordenador para identificarlo. Es imposible tener dos ordenadores con el mismo CID. nota El s\u00edmbolo que aparece a la izquierda del CID (el coraz\u00f3n) indica el estado en el que encuentra el ordenador. \u00a1Enhorabuena! Has instalado un servidor migasfree y has registrado en \u00e9l tu primer ordenador.","title":"Comprobando el estado del servidor"},{"location":"part2/probando_migasfree/#desplegando-software","text":"Y ahora, para ir abriendo boca, vamos a instalar y eliminar aplicaciones de manera centralizada usando el servidor migasfree . Sup\u00f3n que quieres sustituir nano por vim en todos los equipos de tu organizaci\u00f3n. Accede a Liberaci\u00f3n - Despliegues y pulsa en en s\u00edmbolo + para a\u00f1adir un despliegue. nota Sit\u00faa el cursor sobre los iconos del formulario de despliegue para identificar cada campo. Introduce los siguientes datos: Nombre : sustituir nano por vim proyecto : (el que corresponda) paquetes a instalar : vim paquetes a desinstalar : nano atributos incluidos : ALL SYSTEMS Graba el despliegue. Ahora sincroniza el equipo cliente con el servidor migasfree : # migasfree -u Puedes comprobar en la salida est\u00e1ndar del cliente migasfree que se ha configurado el repositorio sustituir-nano-por-vim y que se ha instalado el paquete vim y desinstalado nano . ************* Obteniendo los metadatos de los repositorios... ************** Obj http://localhost sustituir-nano-por-vim InRelease Des:1 http://localhost sustituir-nano-por-vim/PKGS amd64 Packages [ 29 B ] ************************ Desinstalando paquetes... ************************* Los siguientes paquetes se ELIMINAR\u00c1N: nano* ***************************** Correcto ******************* Instalando paquetes obligatorios... ******************** Se instalar\u00e1n los siguientes paquetes NUEVOS: vim ***************************** Correcto nota En el despliegue que acabamos de hacer s\u00f3lo hemos dado la orden de instalar y desinstalar paquetes, pero adem\u00e1s se ha creado un repositorio de paquetes vac\u00edo . En los siguientes cap\u00edtulos aprender\u00e1s a subir tus propios paquetes al servidor e introducirlos en los despliegues, pero vayamos despacito, suave, suavecito. Al poner el atributo SET-ALL SYSTEMS estamos indicando que se aplique este despliegue a todos los ordenadores. Podr\u00edamos haber incluido otros atributos como CID-1 , NET-10.0.2.0/24 , o una lista de ellos. S\u00f3lo se aplicar\u00e1 este despliegue a los ordenadores que tengan alg\u00fan atributo coincidente con los atributos incluidos en el despliegue. Observa que tambi\u00e9n puedes excluir ordenadores. El servidor sigue la siguiente l\u00f3gica: primero comprueba los ordenadores incluidos y despu\u00e9s excluye los ordenadores que tenga alg\u00fan atributo que coincida con los atributos excluidos del despliegue. nota Ahora cada vez que un ordenador se sincroniza con el servidor (y se le aplica este despliegue), se instala vim y desinstala nano si es necesario. Si ahora queremos instalar vim y emacs en todos los ordenadores, pon sus nombres en paquetes a instalar y deja en blanco paquetes a desinstalar : paquetes a instalar : vim emacs paquetes a desinstalar : Conforme los equipos se vayan sincronizando, se producir\u00e1n los cambios. Aprender\u00e1s m\u00e1s sobre los despliegues en el cap\u00edtulo dedicado a La Liberaci\u00f3n. \u00a1Enhorabuena de nuevo! Ya sabes como instalar/desinstalar software de manera centralizada a un conjunto de ordenadores. No est\u00e1 nada mal para empezar, \u00bfno crees? En el siguiente cap\u00edtulo vas a aprender a hacer el cambio de configuraci\u00f3n software al estilo migasfree .","title":"Desplegando software"}]}